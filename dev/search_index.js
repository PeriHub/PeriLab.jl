var documenterSearchIndex = {"docs":
[{"location":"theory/theory_correspondence/#Correspondence-Peridynamics","page":"Non-Ordinary state-based","title":"Correspondence Peridynamics","text":"","category":"section"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"The correspondence formulation is a non-ordinary state-based formulation provided by [9]. It has the goal to apply classical models to Peridynamics.","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"The non-local deformation gradient is defined as","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"underlinemathbfF=int_mathcalHunderlineomegalangle boldsymbolxirangleunderlinemathbfYotimesunderlinemathbfXdV cdot underlinemathbfK^-1","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"with the shape tensor as","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"underlinemathbfK=int_mathcalHunderlineomegalangle boldsymbolxirangleunderlinemathbfXotimesunderlinemathbfXdV","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"Based on this definition strain measures can be created to calculate the Cauchy stresses","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"boldsymbolsigma = f(underlinemathbfF t T )","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"To get the force densities the First-Piola Kirchhoff stress tensor has to be calculated by","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"underlinemathbfP = textdet(underlinemathbfF)boldsymbolsigmaunderlinemathbfF","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"and finaly the force density vector can be determined as","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"underlinemathbfT = underlineomegalangle boldsymbolxirangleunderlinemathbfPunderlinemathbfK^-1mathbfxi","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"The 2D plane strain or plane stress models are represented in the Cauchy stresses by assuming that the strain in the third direction are zero or the stresses.","category":"page"},{"location":"theory/theory_correspondence/","page":"Non-Ordinary state-based","title":"Non-Ordinary state-based","text":"","category":"page"},{"location":"theory/theory_damage/#Damage-Models-Theory","page":"Damage Models Theory","title":"Damage Models Theory","text":"","category":"section"},{"location":"theory/theory_damage/#Critical-stretch","page":"Damage Models Theory","title":"Critical stretch","text":"","category":"section"},{"location":"theory/theory_damage/","page":"Damage Models Theory","title":"Damage Models Theory","text":"The critical stretch model is widely used in literature [1], [12]. It defines the critical length change, or stretch s as a criterion for a damage.","category":"page"},{"location":"theory/theory_damage/","page":"Damage Models Theory","title":"Damage Models Theory","text":"s_critleq s frac underlinemathbfY  underlinemathbfX ","category":"page"},{"location":"theory/theory_damage/","page":"Damage Models Theory","title":"Damage Models Theory","text":"The advantage of this criterion is, that the implementation is rather simple. Also the result is purely geometrical and therefore not influenced by the origin of the bond, because it is neighborhood independed. However, for complex load cases it is to simple and won't work well.","category":"page"},{"location":"theory/theory_damage/","page":"Damage Models Theory","title":"Damage Models Theory","text":"","category":"page"},{"location":"lib/io_functions/#IO-Functions","page":"IO","title":"IO - Functions","text":"","category":"section"},{"location":"lib/io_functions/#Index","page":"IO","title":"Index","text":"","category":"section"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"Pages = [\"io_functions.md\"]","category":"page"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/io_functions/#IO","page":"IO","title":"IO","text":"","category":"section"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"Modules = [IO]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/io_functions/#PeriLab.IO._init_overlap_map_-Tuple{Any}","page":"IO","title":"PeriLab.IO._init_overlap_map_","text":"_init_overlap_map_(size)\n\nInitialize the overlap map.\n\nArguments\n\nsize::Int64: The number of ranks.\n\nReturns\n\noverlap_map::Dict{Int64,Dict{Int64,Dict{String,Vector{Int64}}}}: The overlap map.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.apply_bond_filters-Tuple{Vector{Vector{Int64}}, DataFrames.DataFrame, Dict, Int64}","page":"IO","title":"PeriLab.IO.apply_bond_filters","text":"apply_bond_filters(nlist::Vector{Vector{Int64}}, mesh::DataFrame, params::Dict, dof::Int64)\n\nApply the bond filters to the neighborhood list.\n\nArguments\n\nnlist::Vector{Vector{Int64}}: The neighborhood list.\nmesh::DataFrame: The mesh.\nparams::Dict: The parameters.\ndof::Int64: The degrees of freedom.\n\nReturns\n\nnlist::Vector{Vector{Int64}}: The filtered neighborhood list.\nnlist_filtered_ids::Vector{Vector{Int64}}: The filtered neighborhood list.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.area_of_polygon-Tuple{Any}","page":"IO","title":"PeriLab.IO.area_of_polygon","text":"area_of_polygon(vertices)\n\nCalculate the area of a polygon.\n\nArguments\n\nvertices: The vertices of the polygon.\n\nReturns\n\narea: The area of the polygon.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.bond_intersect_infinite_plane-NTuple{4, Vector{Float64}}","page":"IO","title":"PeriLab.IO.bond_intersect_infinite_plane","text":"bond_intersect_infinite_plane(p0::Vector{Float64}, p1::Vector{Float64}, lower_left_corner::Vector{Float64}, normal::Vector{Float64})\n\nCheck if a line segment intersects an infinite plane.\n\nArguments\n\np0::Vector{Float64}: The start point of the line segment.\np1::Vector{Float64}: The end point of the line segment.\nlower_left_corner::Vector{Float64}: The lower left corner of the plane.\nnormal::Vector{Float64}: The normal of the plane.\n\nReturns\n\nBool: True if the line segment intersects the plane, False otherwise.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.bond_intersect_rectangle_plane-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"IO","title":"PeriLab.IO.bond_intersect_rectangle_plane","text":"bond_intersect_rectangle_plane(x::Vector{Float64}, lower_left_corner::Vector{Float64}, bottom_unit_vector::Vector{Float64}, normal::Vector{Float64}, side_length::Float64, bottom_length::Float64)\n\nCheck if a bond intersects a rectangle plane.\n\nArguments\n\nx::Vector{Float64}: The point.\nlower_left_corner::Vector{Float64}: The lower left corner of the rectangle.\nbottom_unit_vector::Vector{Float64}: The unit vector along the bottom of the rectangle.\nnormal::Vector{Float64}: The normal of the plane.\nside_length::Float64: The side length of the rectangle.\nbottom_length::Float64: The bottom length of the rectangle.\n\nReturns\n\nBool: True if the point is inside the rectangle, False otherwise.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.bond_intersects_disc-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64}","page":"IO","title":"PeriLab.IO.bond_intersects_disc","text":"bond_intersects_disc(p0::Vector{Float64}, p1::Vector{Float64}, center::Vector{Float64}, normal::Vector{Float64}, radius::Float64)\n\nCheck if a line segment intersects a disk.\n\nArguments\n\np0::Vector{Float64}: The start point of the line segment.\np1::Vector{Float64}: The end point of the line segment.\ncenter::Vector{Float64}: The center of the disk.\nnormal::Vector{Float64}: The normal of the plane.\nradius::Float64: The radius of the disk.\n\nReturns\n\nBool: True if the line segment intersects the disk, False otherwise.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.calculate_block-Tuple{Module, String, Union{Int64, Vector{Int64}}, String, Int64}","page":"IO","title":"PeriLab.IO.calculate_block","text":"calculate_block(datamanager::Module, field_key::String, dof::Int64, calculation_type::String, block::Int64)\n\nCalculate the global value of a field for a given block.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nfield_key::String: Field key.\ndof::Union{Int64,Vector{Int64}}: Degree of freedom\ncalculation_type::String: Calculation type.\nblock::Int64: Block number.\n\nReturns\n\nvalue::Float64: Global value.\nnnodes::Int64: Number of nodes.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.calculate_nodelist-Tuple{Module, String, Union{Int64, Vector{Int64}}, String, Union{Int64, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.calculate_nodelist","text":"calculate_nodelist(datamanager::Module, field_key::String, dof::Union{Int64,Vector{Int64}}, calculation_type::String, local_nodes::Vector{Int64})\n\nCalculate the global value of a field for a given set of nodes.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nfield_key::String: Field key.\ndof::Union{Int64,Vector{Int64}}: Degree of freedom\ncalculation_type::String: Calculation type.\nlocal_nodes::Vector{Int64}: Node set.\n\nReturns\n\nvalue::Vector: Global value.\nnnodes::Int64: Number of nodes.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.calculate_volume-Tuple{String, Vector{Vector{Float64}}}","page":"IO","title":"PeriLab.IO.calculate_volume","text":"calculate_volume(element_type::String, vertices::Vector{Vector{Float64}})\n\nCalculate the volume of a element.\n\nArguments\n\nelement_type: The element type of the element.\nvertices: The vertices of the element.\n\nReturns\n\nvolume: The volume of the element.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.check_for_duplicate_in_dataframe-Tuple{DataFrames.DataFrame}","page":"IO","title":"PeriLab.IO.check_for_duplicate_in_dataframe","text":"check_for_duplicate_in_dataframe(mesh::DataFrame)\n\ncheck duplicated entries and throws an error if one is there. If not everything is ok.\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.check_mesh_elements-Tuple{DataFrames.DataFrame, Int64}","page":"IO","title":"PeriLab.IO.check_mesh_elements","text":"check_mesh_elements(mesh, dof)\n\nProcess and analyze mesh data to create an dictionary containing information about mesh elements for further processing.\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\ndof::Int64: The degrees of freedom (DOF) for the mesh elements.\n\nReturns\n\nA dictionary containing information about mesh elements, which can be used for further processing or uploading.\n\nExample\n\n```julia meshdata = DataFrame(x1 = [1.0, 2.0, 3.0], x2 = [4.0, 5.0, 6.0], volume = [10.0, 20.0, 30.0]) dof = 3 result = checkmeshelements(meshdata, dof)\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.check_types_in_dataframe-Tuple{DataFrames.DataFrame}","page":"IO","title":"PeriLab.IO.check_types_in_dataframe","text":"check_types_in_dataframe(mesh::DataFrame)\n\ncheck if block_id in mesh contains only int.\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.clearNP1-Tuple{String}","page":"IO","title":"PeriLab.IO.clearNP1","text":"clearNP1(name::String)\n\nClears the NP1 from the name\n\nArguments\n\nname::String: The name\n\nReturns\n\nname::String: The cleared name\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.close_result_file-Tuple{Dict}","page":"IO","title":"PeriLab.IO.close_result_file","text":"close_result_file(result_file::Dict)\n\nCloses the result file\n\nArguments\n\nresult_file::Dict: The result file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.close_result_files-Tuple{Vector{Dict}, Dict{Int64, Dict}}","page":"IO","title":"PeriLab.IO.close_result_files","text":"close_result_files(result_files::Vector{Dict}, outputs::Dict{Int64,Dict{}})\n\nCloses the result files if the flush_file flag is not set\n\nArguments\n\nresult_files::Vector{Dict}: The result files\noutputs::Dict{Int64,Dict{}}: The output settings\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.close_result_files-Tuple{Vector{Dict}}","page":"IO","title":"PeriLab.IO.close_result_files","text":"close_result_files(result_files::Vector{Dict})\n\nCloses the result files\n\nArguments\n\nresult_files::Vector{Dict}: The result files\n\nReturns\n\ntrue: File is closed\nfalse: File was already closed\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_and_distribute_bond_norm-Tuple{MPI.Comm, Module, Vector{Vector{Int64}}, Vector{Vector{Int64}}, Vector{Any}, Int64}","page":"IO","title":"PeriLab.IO.create_and_distribute_bond_norm","text":"create_and_distribute_bond_norm(comm::MPI.Comm, datamanager::Module, nlist_filtered_ids::Vector{Vector{Int64}}, distribution::Vector{Int64}, bond_norm::Vector{Float64}, dof::Int64)\n\nCreate and distribute the bond norm\n\nArguments\n\ncomm::MPI.Comm: MPI communicator\ndatamanager::Module: Data manager\nnlist_filtered_ids::Vector{Vector{Int64}}: The filtered neighborhood list\ndistribution::Vector{Int64}: The distribution\nbond_norm::Vector{Float64}: The bond norm\ndof::Int64: The degree of freedom\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_distribution-Tuple{Int64, Int64}","page":"IO","title":"PeriLab.IO.create_distribution","text":"create_distribution(nnodes::Int64, size::Int64)\n\nCalculate the initial size of each chunk for a nearly equal number of nodes vs. cores this algorithm might lead to the problem, that the last core is not equally loaded\n\nArguments\n\nnnodes::Int64: The number of nodes.\nsize::Int64: The number of cores.\n\nReturns\n\ndistribution::Array{Int64,1}: The distribution of the nodes.\npoint_to_core::Array{Int64,1}: The number of nodes in each rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_distribution_neighbor_based-Tuple{Int64, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.create_distribution_neighbor_based","text":"create_distribution_neighbor_based(nnodes::Int64,nlist::Vector{Vector{Int64}}, size::Int64)\n\nCalculate the initial size of each chunk for a nearly equal number of nodes vs. cores this algorithm might lead to the problem, that the last core is not equally loaded\n\nArguments\n\nnnodes::Int64: The number of nodes.\nnlist::Vector{Vector{Int64}}: The neighborhood list.\nsize::Int64: The number of cores.\n\nReturns\n\ndistribution::Array{Int64,1}: The distribution of the nodes.\npoint_to_core::Array{Int64,1}: The number of nodes in each rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_distribution_node_based-Tuple{Int64, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.create_distribution_node_based","text":"create_distribution_node_based(nnodes::Int64,nlist::Vector{Vector{Int64}}, size::Int64)\n\nCalculate the initial size of each chunk for a nearly equal number of nodes vs. cores this algorithm might lead to the problem, that the last core is not equally loaded\n\nArguments\n\nnnodes::Int64: The number of nodes.\nnlist::Vector{Vector{Int64}}: The neighborhood list.\nsize::Int64: The number of cores.\n\nReturns\n\ndistribution::Array{Int64,1}: The distribution of the nodes.\npoint_to_core::Array{Int64,1}: The number of nodes in each rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_neighborhoodlist-Tuple{DataFrames.DataFrame, Dict, Int64}","page":"IO","title":"PeriLab.IO.create_neighborhoodlist","text":"create_neighborhoodlist(mesh::DataFrame, params::Dict, dof::Int64)\n\nCreate the neighborhood list of the mesh elements.\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\nparams::Dict: The input parameters.\ndof::Int64: The degrees of freedom (DOF) for the mesh elements.\n\nReturns\n\nnlist::Array{Array{Int64,1},1}: The neighborhood list of the mesh elements.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_overlap_map-Tuple{Vector{Vector{Int64}}, Vector{Int64}, Int64}","page":"IO","title":"PeriLab.IO.create_overlap_map","text":"create_overlap_map(distribution, ptc, size)\n\nCreate the overlap map.\n\nArguments\n\ndistribution::Array{Int64,1}: The distribution of the nodes.\nptc::Array{Int64,1}: The number of nodes in each rank.\nsize::Int64: The number of ranks.\n\nReturns\n\noverlap_map::Dict{Int64,Dict{Int64,Dict{String,Vector{Int64}}}}: The overlap map.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.create_result_file","page":"IO","title":"PeriLab.IO.create_result_file","text":"create_result_file(filename::Union{AbstractString,String}, num_nodes::Int64, num_dim::Int64, num_elem_blks::Int64, num_node_sets::Int64)\n\nCreates a exodus file for the results\n\nArguments\n\nfilename::Union{AbstractString,String}: The name of the file to create\nnum_nodes::Int64: The number of nodes\nnum_dim::Int64: The number of dimensions\nnum_elem_blks::Int64: The number of element blocks\nnum_node_sets::Int64: The number of node sets\n\nReturns\n\nresult_file::Dict{String,Any}: A dictionary containing the filename and the exodus file\n\n\n\n\n\n","category":"function"},{"location":"lib/io_functions/#PeriLab.IO.create_result_file-Tuple{String, Dict}","page":"IO","title":"PeriLab.IO.create_result_file","text":"create_result_file(filename::String, outputs::Dict)\n\nCreates a csv file for the results\n\nArguments\n\nfilename::String: The name of the file to create\noutputs::Dict: The outputs dictionary\n\nReturns\n\nDict: The result file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.csv_reader-Tuple{String}","page":"IO","title":"PeriLab.IO.csv_reader","text":"csv_reader(filename::String)\n\nRead csv and return it as a DataFrame.\n\nArguments\n\nfilename::String: The path to the mesh file.\n\nReturns\n\ncsvData::DataFrame: The csv data a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.define_nsets-Tuple{Dict{String, Vector{Int64}}, Module}","page":"IO","title":"PeriLab.IO.define_nsets","text":"define_nsets(nsets::Dict{String,Vector{Int64}}, datamanager::Module)\n\nDefines the node sets\n\nArguments\n\nnsets::Dict{String,Vector{Int64}}: Node sets read from files\ndatamanager::Module: Data manager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.delete_files-Tuple{Vector{Dict}, String}","page":"IO","title":"PeriLab.IO.delete_files","text":"delete_files(result_files::Vector{Dict})\n\nDeletes the result files\n\nArguments\n\nresult_files: The result files\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.disk_filter-Tuple{Int64, Matrix{Float64}, Dict, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.disk_filter","text":"disk_filter(nnodes::Int64, data::Matrix{Float64}, filter::Dict, nlist::Vector{Vector{Int64}}, dof::Int64)\n\nApply the disk filter to the neighborhood list.\n\nArguments\n\nnnodes::Int64: The number of nodes.\ndata::Matrix{Float64}: The data.\nfilter::Dict: The filter.\nnlist::Vector{Vector{Int64}}: The neighborhood list.\ndof::Int64: The degrees of freedom.\n\nReturns\n\nfilter_flag::Vector{Bool}: The filter flag.\nnormal::Vector{Float64}: The normal vector of the disk.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.distribute_neighborhoodlist_to_cores-Tuple{MPI.Comm, Module, Vector{Vector{Int64}}, Vector{Vector{Int64}}, Bool}","page":"IO","title":"PeriLab.IO.distribute_neighborhoodlist_to_cores","text":"distribute_neighborhoodlist_to_cores(comm::MPI.Comm, datamanager::Module, nlist, distribution)\n\nDistributes the neighborhood list to the cores.\n\nArguments\n\ncomm::MPI.Comm: MPI communicator\ndatamanager::Module: Data manager\nnlist: neighborhood list\ndistribution Array{Int64}: global nodes distribution at cores\n\nReturns\n\ndatamanager::Module: data manager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.distribution_to_cores-Tuple{MPI.Comm, Module, DataFrames.DataFrame, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.distribution_to_cores","text":"distribution_to_cores(comm::MPI.Comm, datamanager::Module, mesh, distribution, dof::Int64)\n\nDistributes the mesh data to the cores\n\nArguments\n\ncomm::MPI.Comm: MPI communicator\ndatamanager::Module: Data manager\nmesh: Mesh\ndistribution Array{Int64}: global nodes distribution at cores\ndof::Int64: Degree of freedom\n\nReturns\n\ndatamanager::Module: data manager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.element_distribution-Tuple{Vector{Vector{Int64}}, Vector{Int64}, Int64}","page":"IO","title":"PeriLab.IO.element_distribution","text":"element_distribution(topology::Vector{Vector{Int64}}, ptc::Vector{Int64}, size::Int64)\n\nCreate the distribution of the finite elements. Is needed to avoid multiple element calls. Each element should run only one time at the cores.\n\nArguments\n\ntopology::Vector{Vector{Int64}}: The topology list of the mesh elements.\nnlist::Vector{Vector{Int64}}: The neighborhood list of the mesh elements.\nsize::Int64: The number of ranks.\n\nReturns\n\ndistribution::Vector{Vector{Int64}}: The distribution of the nodes.\netc::Vector{Int64}: The number of nodes in each rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.extrude_surface_mesh-Tuple{DataFrames.DataFrame, Dict}","page":"IO","title":"PeriLab.IO.extrude_surface_mesh","text":"extrude_surface_mesh(mesh::DataFrame)\n\nextrude the mesh at the surface of the block\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\nparams::Dict: The input parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.find_and_set_core_value_avg-Tuple{MPI.Comm, Union{Float64, Int64}, Int64}","page":"IO","title":"PeriLab.IO.find_and_set_core_value_avg","text":"find_and_set_core_value_avg(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value avg\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.find_and_set_core_value_max-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"IO","title":"PeriLab.IO.find_and_set_core_value_max","text":"find_and_set_core_value_max(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value max\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.find_and_set_core_value_min-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"IO","title":"PeriLab.IO.find_and_set_core_value_min","text":"find_and_set_core_value_min(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value min\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.find_and_set_core_value_sum-Tuple{MPI.Comm, Union{Bool, Float64, Int64}}","page":"IO","title":"PeriLab.IO.find_and_set_core_value_sum","text":"find_and_set_core_value_sum(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value sum\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.find_global_core_value!-Tuple{Union{Float64, Int64}, String, Int64, Module}","page":"IO","title":"PeriLab.IO.find_global_core_value!","text":"find_global_core_value!(global_value::Union{Int64,Float64}, calculation_type::String, nnodes::Int64, datamanager::Module)\n\nFind global core value.\n\nArguments\n\nglobal_value::Union{Int64,Float64}: The global value\ncalculation_type::String: The calculation type\nnnodes::Int64: The number of nodes\ndatamanager::Module: The datamanager\n\nReturns\n\nglobal_value::Union{Int64,Float64}: The global value\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.gather_values-Tuple{MPI.Comm, Any}","page":"IO","title":"PeriLab.IO.gather_values","text":"gather_values(comm::MPI.Comm, value::Any)\n\nGather values\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Any: The value\n\nReturns\n\nrecv_msg::Any: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_block_nodes-Tuple{Union{SubArray, Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.get_block_nodes","text":"get_block_nodes(block_Id::Union{SubArray,Vector{Int64}}, block::Int64)\n\nReturns the nodes of a block\n\nArguments\n\nblock_Id::Union{SubArray,Vector{Int64}}: The block Id\nblock::Int64: The block\n\nReturns\n\nnodes::Vector{Int64}: The nodes of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_bond_geometry-Tuple{Module}","page":"IO","title":"PeriLab.IO.get_bond_geometry","text":"get_bond_geometry(datamanager::Module)\n\nGets the bond geometry\n\nArguments\n\ndatamanager::Module: Data manager\n\nReturns\n\ndatamanager::Module: data manager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_file_size-Tuple{Vector{Dict}}","page":"IO","title":"PeriLab.IO.get_file_size","text":"get_file_size(result_files::Vector{Dict})\n\nGets the file size of the result files\n\nArguments\n\nresult_files: The result files\n\nReturns\n\ntotal_file_size: The total file size\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_global_values-Tuple{Dict, Module}","page":"IO","title":"PeriLab.IO.get_global_values","text":"get_global_values(output::Dict, datamanager::Module)\n\nGet global values.\n\nArguments\n\noutput::Dict: The output\ndatamanager::Module: The datamanager\n\nReturns\n\nglobal_values::Vector: The global values\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_local_element_topology-Tuple{Module, Vector{Vector{Int64}}, Vector{Int64}}","page":"IO","title":"PeriLab.IO.get_local_element_topology","text":"get_local_element_topology(datamanager::Module, topology::Vector{Vector{Int64}}, distribution::Vector{Int64})\n\nGet the local element topology\n\nArguments\n\ndatamanager::Module: The datamanager\ntopology::Vector{Vector{Int64}}: The topology\ndistribution::Vector{Int64}: The distribution\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_local_neighbors-Tuple{Any, Any}","page":"IO","title":"PeriLab.IO.get_local_neighbors","text":"get_local_neighbors(mapping, nlist_core)\n\nGets the local neighborhood list from the global neighborhood list\n\nArguments\n\nmapping: mapping function\nnlist_core: global neighborhood list\n\nReturns\n\nnlist_core: local neighborhood list\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_local_overlap_map-Tuple{Any, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.get_local_overlap_map","text":"get_local_overlap_map()\n\nChanges entries in the overlap map from the global numbering to the local computer core one.\n\nArguments\n\noverlap_map::Dict{Int64, Dict{Int64, String}}: overlap map with global nodes.\ndistribution::Vector{Vector{Int64}}: global nodes distribution at cores, needed for the gobal to local mapping\nranks Array{Int64} : number of used computer cores\n\nReturns\n\noverlap_map::Dict{Int64, Dict{Int64, String}}: returns overlap map with local nodes.\n\nExample:\n\nget_local_overlap_map(overlap_map, distribution, ranks)  # returns local nodes\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_mpi_rank_string-Tuple{Int64, Int64}","page":"IO","title":"PeriLab.IO.get_mpi_rank_string","text":"get_mpi_rank_string(rank::Int64, max_rank::Int64)\n\nGet MPI rank string.\n\nArguments\n\nvalue::Int64: The rank\nmax_rank::Int64: The max rank\n\nReturns\n\nresult::String: The result\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_number_of_neighbornodes-Tuple{Vector{Vector{Int64}}, Bool}","page":"IO","title":"PeriLab.IO.get_number_of_neighbornodes","text":"get_number_of_neighbornodes(nlist::Vector{Vector{Int64}})\n\nGet the number of neighbors for each node.\n\nArguments\n\nnlist::Vector{Vector{Int64}}: The neighborhood list of the mesh elements.\n\nReturns\n\nlength_nlist::Vector{Int64}: The number of neighbors for each node.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_paraview_coordinates-Tuple{Int64, Int64}","page":"IO","title":"PeriLab.IO.get_paraview_coordinates","text":"get_paraview_coordinates(dof::Int64, refDof::Int64)\n\nReturns the paraview specific dof\n\nArguments\n\ndof::Int64: The degrees of freedom\nrefDof::Int64: The reference degrees of freedom\n\nReturns\n\nparaview_specifics::String: The paraview specific dof\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.get_results_mapping-Tuple{Dict, String, Module}","page":"IO","title":"PeriLab.IO.get_results_mapping","text":"get_results_mapping(params::Dict, path::String, datamanager::Module)\n\nGets the results mapping\n\nArguments\n\nparams::Dict: The parameters\npath::String: The path\ndatamanager::Module: The datamanager\n\nReturns\n\noutput_mapping::Dict{Int64,Dict{}}: The results mapping\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.glob_to_loc-Tuple{Any}","page":"IO","title":"PeriLab.IO.glob_to_loc","text":"glob_to_loc(distribution)\n\nGet the global to local mapping\n\nArguments\n\ndistribution: The distribution\n\nReturns\n\nglob_to_loc: The global to local mapping\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.global_value_avg-Tuple{VecOrMat{Float64}, Union{Int64, Vector{Int64}}, Union{SubArray, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.global_value_avg","text":"global_value_avg(field::Union{Vector{Float64},Matrix{Float64}}, dof::Union{Int64,Vector{Int64}}, nodes::Union{SubArray,Vector{Int64}})\n\nCalculate the global average of a field for given nodes.\n\nArguments\n\nfield::Union{Vector{Float64},Matrix{Float64}}: Field.\ndof::Union{Int64,Vector{Int64}}: Degree of freedom\nnodes::Union{SubArray,Vector{Int64}}: Nodes.\n\nReturns\n\nreturnValue::Vector: Global value.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.global_value_max-Tuple{VecOrMat{Float64}, Union{Int64, Vector{Int64}}, Union{SubArray, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.global_value_max","text":"global_value_max(field::Union{Vector{Float64},Matrix{Float64}}, dof::Union{Int64,Vector{Int64}}, nodes::Union{SubArray,Vector{Int64}})\n\nCalculate the global maximum of a field for given nodes.\n\nArguments\n\nfield::Union{Vector{Float64},Matrix{Float64}}: Field.\ndof::Union{Int64,Vector{Int64}}: Degree of freedom\nnodes::Union{SubArray,Vector{Int64}}: Nodes.\n\nReturns\n\nreturnValue::Vector: Global value.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.global_value_min-Tuple{VecOrMat{Float64}, Union{Int64, Vector{Int64}}, Union{SubArray, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.global_value_min","text":"global_value_min(field::Union{Vector{Float64},Matrix{Float64}}, dof::Union{Int64,Vector{Int64}}, nodes::Union{SubArray,Vector{Int64}})\n\nCalculate the global minimum of a field for given nodes.\n\nArguments\n\nfield::Union{Vector{Float64},Matrix{Float64}}: Field.\ndof::Union{Int64,Vector{Int64}}: Degree of freedom\nnodes::Union{SubArray,Vector{Int64}}: Nodes.\n\nReturns\n\nreturnValue::Vector: Global value.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.global_value_sum-Tuple{Union{Array{Float64, 3}, VecOrMat{Float64}}, Union{Int64, Vector{Int64}}, Union{SubArray, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.global_value_sum","text":"global_value_sum(field::Union{Vector{Float64},Matrix{Float64}}, dof::Union{Int64,Vector{Int64}}, nodes::Union{SubArray,Vector{Int64}})\n\nCalculate the global sum of a field for given nodes.\n\nArguments\n\nfield::Union{Vector{Float64},Matrix{Float64}}: Field.\ndof::Union{Int64,Vector{Int64}: Degree of freedom\nnodes::Union{SubArray,Vector{Int64}}: Nodes.\n\nReturns\n\nreturnValue::Vector: Global value.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.hex8_volume-Tuple{Vector{Vector{Float64}}}","page":"IO","title":"PeriLab.IO.hex8_volume","text":"hex8volume(hexvertices)\n\nCalculate the volume of a hex.\n\nArguments\n\nhex_vertices: The vertices of the wedge.\n\nReturns\n\nvolume: The volume of the wedge.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.init_data-Tuple{Dict, String, Module, MPI.Comm, TimerOutputs.TimerOutput}","page":"IO","title":"PeriLab.IO.init_data","text":"init_data(params::Dict, path::String, datamanager::Module, comm::MPI.Comm, to::TimerOutput)\n\nInitializes the data for the mesh.\n\nArguments\n\nparams::Dict: The parameters for the simulation.\npath::String: The path to the mesh file.\ndatamanager::Data_manager: The data manager.\ncomm::MPI.Comm: The MPI communicator.\nto::TimerOutput: The timer output.\n\nReturns\n\ndatamanager::Data_manager: The data manager.\nparams::Dict: The parameters for the simulation.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.init_orientations-Tuple{Module}","page":"IO","title":"PeriLab.IO.init_orientations","text":"init_orientations(datamanager::Module)\n\nInitialize orientations.\n\nArguments\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.init_results_in_exodus","page":"IO","title":"PeriLab.IO.init_results_in_exodus","text":"init_results_in_exodus(exo::ExodusDatabase, output::Dict{}, coords::Union{Matrix{Int64},Matrix{Float64}}, block_Id::Vector{Int64}, uniqueBlocks::Vector{Int64}, nsets::Dict{String,Vector{Int64}}, global_ids::Vector{Int64}, PERILAB_VERSION::String)\n\nInitializes the results in exodus\n\nArguments\n\nexo::ExodusDatabase: The exodus database\noutput::Dict{String,Any}: The output\ncoords::Union{Matrix{Int64},Matrix{Float64}}: The coordinates\nblock_Id::Vector{Int64}: The block Id\nuniqueBlocks::Vector{Int64}: The unique blocks\nnsets::Dict{String,Vector{Int64}}: The node sets\nglobal_ids::Vector{Int64}: The global ids\n\nReturns\n\nresult_file::Dict{String,Any}: The result file\n\n\n\n\n\n","category":"function"},{"location":"lib/io_functions/#PeriLab.IO.init_write_results-Tuple{Dict, String, String, Module, Int64, String}","page":"IO","title":"PeriLab.IO.init_write_results","text":"init_write_results(params::Dict, output_dir::String, path::String, datamanager::Module, nsteps::Int64, PERILAB_VERSION::String)\n\nInitialize write results.\n\nArguments\n\nparams::Dict: The parameters\noutput_dir::String: The output directory.\npath::String: The path\ndatamanager::Module: The datamanager\nnsteps::Int64: The number of steps\n\nReturns\n\nresult_files::Array: The result files\noutputs::Dict: The outputs\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.initialize_data-Tuple{String, String, Module, MPI.Comm, TimerOutputs.TimerOutput}","page":"IO","title":"PeriLab.IO.initialize_data","text":"initialize_data(filename::String, filedirectory::String, datamanager::Module, comm::MPI.Comm, to::TimerOutputs.TimerOutput)\n\nInitialize data.\n\nArguments\n\nfilename::String: The name of the input file.\nfiledirectory::String: The directory of the input file.\ndatamanager::Module: The datamanager\ncomm::MPI.Comm: The MPI communicator\nto::TimerOutputs.TimerOutput: The TimerOutput\n\nReturns\n\ndata::Dict: The data\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.load_and_evaluate_mesh-Tuple{Dict, String, Int64, TimerOutputs.TimerOutput}","page":"IO","title":"PeriLab.IO.load_and_evaluate_mesh","text":"load_and_evaluate_mesh(params::Dict, path::String, ranksize::Int64, to::TimerOutput)\n\nLoad and evaluate the mesh data.\n\nArguments\n\nparams::Dict: The input parameters.\npath::String: The path to the mesh file.\nranksize::Int64: The number of ranks.\nto::TimerOutput: The timer output\n\nReturns\n\ndistribution::Array{Int64,1}: The distribution of the mesh elements.\nmesh::DataFrame: The mesh data as a DataFrame.\nntype::Dict: The type of the mesh elements.\noverlap_map::Array{Array{Int64,1},1}: The overlap map of the mesh elements.\nnlist::Array{Array{Int64,1},1}: The neighborhood list of the mesh elements.\ndof::Int64: The degrees of freedom (DOF) for the mesh elements.\nnsets::Dict: The node sets\ntopology::Int64::Array{Int64,nelement:nodes}`: The topology of elements.\nel_distribution::Array{Int64,1}: The distribution of the finite elements.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.local_nodes_from_dict-Tuple{Dict{Int64, Int64}, Vector{Int64}}","page":"IO","title":"PeriLab.IO.local_nodes_from_dict","text":"local_nodes_from_dict(glob_to_loc::Dict{Int,Int}, global_nodes::Vector{Int64})\n\nChanges entries in the overlap map from the global numbering to the local computer core one.\n\nArguments\n\nglob_to_loc::Dict{Int,Int}: global to local mapping\nglobal_nodes::Vector{Int64}: global nodes\n\nReturns\n\noverlap_map::Dict{Int64, Dict{Int64, String}}: returns overlap map with local nodes.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.merge_exodus_file-Tuple{AbstractString}","page":"IO","title":"PeriLab.IO.merge_exodus_file","text":"merge_exodus_file(file_name::Union{AbstractString,String})\n\nMerges the exodus file\n\nArguments\n\nfile_name::Union{AbstractString,String}: The name of the file to merge\n\nReturns\n\nexo::ExodusDatabase: The exodus file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.merge_exodus_files-Tuple{Vector{Dict}, String}","page":"IO","title":"PeriLab.IO.merge_exodus_files","text":"merge_exodus_files(result_files::Vector{Any}, output_dir::String)\n\nMerges exodus output files\n\nArguments\n\nresult_files::Vector{Any}: The result files\noutput_dir::String: The file directory\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.neighbors-Tuple{DataFrames.DataFrame, Dict, Union{Vector{Int64}, Vector{String}}}","page":"IO","title":"PeriLab.IO.neighbors","text":"neighbors(mesh, params::Dict, coor)\n\nCompute the neighbor list for each node in a mesh based on their proximity using a BallTree data structure.\n\nArguments\n\nmesh: A mesh data structure containing the coordinates and other information.\nparams: paramss needed for computing the neighbor list.\ncoor: A vector of coordinate names along which to compute the neighbor list.\n\nReturns\n\nAn array of neighbor lists, where each element represents the neighbors of a node in the mesh.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.node_distribution","page":"IO","title":"PeriLab.IO.node_distribution","text":"node_distribution(nlist::Vector{Vector{Int64}}, size::Int64)\n\nCreate the distribution of the nodes.\n\nArguments\n\nnlist::Vector{Vector{Int64}}: The neighborhood list of the mesh elements.\nsize::Int64: The number of ranks.\ndistribution_type::String: The distribution type.\n\nReturns\n\ndistribution::Vector{Vector{Int64}}: The distribution of the nodes.\nptc::Vector{Int64}: Defines at which core / rank each node lies.\nntype::Dict: The type of the nodes.\n\n\n\n\n\n","category":"function"},{"location":"lib/io_functions/#PeriLab.IO.open_result_file-Tuple{Dict}","page":"IO","title":"PeriLab.IO.open_result_file","text":"open_result_file(result_file::Dict)\n\nOpens the result file\n\nArguments\n\nresult_file::Dict: The result file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.paraview_specifics-Tuple{Int64}","page":"IO","title":"PeriLab.IO.paraview_specifics","text":"paraview_specifics(dof::Int64)\n\nReturns the paraview specific dof\n\nArguments\n\ndof::Int64: The degrees of freedom\n\nReturns\n\nparaview_specifics::String: The paraview specific dof\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.read_external_topology-Tuple{String}","page":"IO","title":"PeriLab.IO.read_external_topology","text":"read_external_topology(filename::String)\n\nRead external topoloy data from a file and return it as a DataFrame.\n\nArguments\n\nfilename::String: The path to the mesh file.\n\nReturns\n\nexternal_topology::DataFrame: The external topology data as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.read_input-Tuple{String}","page":"IO","title":"PeriLab.IO.read_input","text":"read_input(filename::String)\n\nReads the input deck from a yaml file\n\nArguments\n\nfilename::String: The name of the yaml file\n\nReturns\n\nparams::Dict{String,Any}: The parameters read from the yaml file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.read_input_file-Tuple{String}","page":"IO","title":"PeriLab.IO.read_input_file","text":"read_input_file(filename::String)\n\nReads the input deck from a yaml file\n\nArguments\n\nfilename::String: The name of the yaml file\n\nReturns\n\nDict{String,Any}: The validated parameters read from the yaml file.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.read_mesh-Tuple{String, Dict}","page":"IO","title":"PeriLab.IO.read_mesh","text":"read_mesh(filename::String, params::Dict)\n\nRead mesh data from a file and return it as a DataFrame.\n\nArguments\n\nfilename::String: The path to the mesh file.\nparams::Dict: The input parameters.\n\nReturns\n\nmesh::DataFrame: The mesh data as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.rectangular_plane_filter-Tuple{Int64, Matrix{Float64}, Dict, Vector{Vector{Int64}}, Int64}","page":"IO","title":"PeriLab.IO.rectangular_plane_filter","text":"rectangular_plane_filter(nnodes::Int64, data::Matrix{Float64}, filter::Dict, nlist::Vector{Vector{Int64}}, dof::Int64)\n\nApply the rectangular plane filter to the neighborhood list.\n\nArguments\n\nnnodes::Int64: The number of nodes.\ndata::Matrix{Float64}: The data.\nfilter::Dict: The filter.\nnlist::Vector{Vector{Int64}}: The neighborhood list.\ndof::Int64: The degrees of freedom.\n\nReturns\n\nfilter_flag::Vector{Bool}: The filter flag.\nnormal::Vector{Float64}: The normal vector of the disk.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.send_single_value_from_vector-Tuple{MPI.Comm, Int64, Union{Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}}, Type}","page":"IO","title":"PeriLab.IO.send_single_value_from_vector","text":"send_single_value_from_vector(comm::MPI.Comm, controller::Int64, values::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}, type::Type)\n\nSends a single value from a vector to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nvalues::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The values\ntype::Type: The type\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.send_value-Tuple{MPI.Comm, Any, Any}","page":"IO","title":"PeriLab.IO.send_value","text":"send_value(comm::MPI.Comm, controller, send_msg)\n\nSends a value to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.send_vector_from_root_to_core_i-Tuple{MPI.Comm, Any, Any, Any}","page":"IO","title":"PeriLab.IO.send_vector_from_root_to_core_i","text":"send_vector_from_root_to_core_i(comm::MPI.Comm, send_msg, recv_msg, distribution)\n\nSends a vector from the root to the core i\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The receive message\ndistribution::Vector{Int64}: The distribution\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.set_dof-Tuple{DataFrames.DataFrame}","page":"IO","title":"PeriLab.IO.set_dof","text":"set_dof(mesh::DataFrame)\n\nSet the degrees of freedom (DOF) for the mesh elements.\n\nArguments\n\nmesh::DataFrame: The input mesh data represented as a DataFrame.\n\nReturns\n\ndof::Int64: The degrees of freedom (DOF) for the mesh elements.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.show_block_summary-Tuple{Dict, Dict, String, Bool, MPI.Comm, Module}","page":"IO","title":"PeriLab.IO.show_block_summary","text":"show_block_summary(solver_options::Dict, params::Dict, log_file::String, silent::Bool, comm::MPI.Comm, datamanager::Module)\n\nShow block summary.\n\nArguments\n\nsolver_options::Dict: The solver options\nparams::Dict: The params\nlog_file::String: The log file\nsilent::Bool: The silent flag\ncomm::MPI.Comm: The comm\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.show_mpi_summary-Tuple{String, Bool, MPI.Comm, Module}","page":"IO","title":"PeriLab.IO.show_mpi_summary","text":"show_mpi_summary(log_file::String, silent::Bool, comm::MPI.Comm, datamanager::Module)\n\nShow MPI summary.\n\nArguments\n\nlog_file::String: The log file\nsilent::Bool: The silent flag\ncomm::MPI.Comm: The comm\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.split_vector-Tuple{Any, Any, Any}","page":"IO","title":"PeriLab.IO.split_vector","text":"split_vector(input, row_nums, dof)\n\nSplit a vector into a vector of matrices\n\nArguments\n\ninput::Vector: The input vector\nrow_nums::Vector: The row numbers\ndof::Int: The degree of freedom\n\nReturns\n\nresult::Vector: The result vector\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.synch_controller_bonds_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"IO","title":"PeriLab.IO.synch_controller_bonds_to_responder","text":"synch_controller_bonds_to_responder(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.synch_controller_bonds_to_responder_flattened-Tuple{MPI.Comm, Any, Any, Any}","page":"IO","title":"PeriLab.IO.synch_controller_bonds_to_responder_flattened","text":"synch_controller_bonds_to_responder_flattened(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.synch_controller_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"IO","title":"PeriLab.IO.synch_controller_to_responder","text":"synch_controller_to_responder(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the controller to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.synch_responder_to_controller-Tuple{MPI.Comm, Any, Any, Any}","page":"IO","title":"PeriLab.IO.synch_responder_to_controller","text":"synch_responder_to_controller(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the responder to the controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.tetrahedron_volume-Tuple{Vector{Vector{Float64}}}","page":"IO","title":"PeriLab.IO.tetrahedron_volume","text":"tetrahedron_volume(tet_vertices)\n\nCalculate the volume of a tetrahedron.\n\nArguments\n\ntet_vertices: The vertices of the tetrahedron.\n\nReturns\n\nvolume: The volume of the tetrahedron.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.wedge6_volume-Tuple{Vector{Vector{Float64}}}","page":"IO","title":"PeriLab.IO.wedge6_volume","text":"wedge6_volume(wedge_vertices)\n\nCalculate the volume of a wedge.\n\nArguments\n\nwedge_vertices: The vertices of the wedge.\n\nReturns\n\nvolume: The volume of the wedge.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.write_global_results_in_csv-Tuple{IOStream, Float64, Any}","page":"IO","title":"PeriLab.IO.write_global_results_in_csv","text":"write_global_results_in_csv(csv_file::IOStream, time::Float64, global_values)\n\nWrites the global results to the csv file\n\nArguments\n\ncsv_file::IOStream: The csv file\nglobal_values: The global values\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.write_global_results_in_exodus-Tuple{Exodus.ExodusDatabase, Int64, Any}","page":"IO","title":"PeriLab.IO.write_global_results_in_exodus","text":"write_global_results_in_exodus(exo::ExodusDatabase, step::Int64, global_values)\n\nWrites the global results in the exodus file\n\nArguments\n\nexo::ExodusDatabase: The exodus file\nstep::Int64: The step\nglobal_values: The global values\n\nReturns\n\nexo::ExodusDatabase: The exodus file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.write_nodal_results_in_exodus-Tuple{Exodus.ExodusDatabase, Int64, Dict, Module}","page":"IO","title":"PeriLab.IO.write_nodal_results_in_exodus","text":"write_nodal_results_in_exodus(exo::ExodusDatabase, step::Int64, output::Dict, datamanager::Module)\n\nWrites the nodal results in the exodus file\n\nArguments\n\nexo::ExodusDatabase: The exodus file\nstep::Int64: The step\noutput::Dict: The output\ndatamanager::Module: The datamanager\n\nReturns\n\nexo::ExodusDatabase: The exodus file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.write_results-Tuple{Vector{Dict}, Float64, Float64, Dict, Module}","page":"IO","title":"PeriLab.IO.write_results","text":"write_results(result_files::Vector{Any}, time::Float64, max_damage::Float64, outputs::Dict, datamanager::Module)\n\nWrite results.\n\nArguments\n\nresult_files::Vector{Any}: The result files\ntime::Float64: The time\nmax_damage::Float64: The maximum damage\noutputs::Dict: The outputs\ndatamanager::Module: The datamanager\n\nReturns\n\nresult_files::Vector{Any}: The result files\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.write_step_and_time-Tuple{Exodus.ExodusDatabase, Int64, Float64}","page":"IO","title":"PeriLab.IO.write_step_and_time","text":"write_step_and_time(exo::ExodusDatabase, step::Int64, time::Float64)\n\nWrites the step and time in the exodus file\n\nArguments\n\nexo::ExodusDatabase: The exodus file\nstep::Int64: The step\ntime::Float64: The time\n\nReturns\n\nexo::ExodusDatabase: The exodus file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#Geometry","page":"IO","title":"Geometry","text":"","category":"section"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"Modules = [IO.Geometry]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/io_functions/#PeriLab.IO.Geometry.compute_deformation_gradients!-Tuple{Array{Float64, 3}, Union{SubArray, Vector{Int64}}, Int64, Vector{Vector{Int64}}, Vector{Float64}, Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Vector{Vector{Float64}}}, Vector{Vector{Vector{Float64}}}, Array{Float64, 3}}","page":"IO","title":"PeriLab.IO.Geometry.compute_deformation_gradients!","text":"compute_deformation_gradients!(nodes::Union{SubArray, Vector{Int64}}, nlist, volume, omega, bond_damage, undeformed_bond, deformed_bond, inverse_shape_tensor, deformation_gradient)\n\nCalculate the deformation gradient tensor for a set of nodes in a computational mechanics context.\n\nArguments\n\nnodes::Union{SubArray, Vector{Int64}}: A vector of integers representing node IDs.\ndof::Int64: An integer representing the degrees of freedom.\nnlist: A data structure (e.g., a list or array) representing neighboring node IDs for each node.\nvolume: A vector or array containing volume information for each node.\nomega: A vector or array containing omega information for each node.\nbond_damage: A data structure representing bond damage for each node.\nundeformed_bond: A data structure representing bond geometries for each node.\ndeformed_bond: A data structure representing deformed bond properties for each node.\ninverse_shape_tensor: A data structure representing the inverse shape tensors for each node.\ndeformation_gradient: A preallocated 3D array to store the deformation gradient tensors for each node.\n\nOutput\n\ndeformation_gradient: An updated deformation_gradient array with calculated deformation gradient tensors.\n\nDescription\n\nThis function calculates the deformation gradient tensor for a set of nodes in a computational mechanics context. The deformation gradient tensor characterizes the deformation of a material.\n\nFor each node in nodes, the function iterates through degrees of freedom (dof) and computes elements of the deformation gradient tensor based on bond damage, deformed bond properties, bond geometries, volume, and omega information. The calculated deformation gradient tensor is stored in deformation_gradient.\n\nExample\n\n```julia nodes = [1, 2, 3] dof = 3 nlist = [[2, 3], [1, 3], [1, 2]] volume = [0.1, 0.2, 0.3] omega = [0.5, 0.4, 0.6] bonddamage = zeros(Float64, length(nodes), length(nlist[1])) undeformedbond = rand(Float64, length(nodes), length(nlist[1]), dof) deformedbond = rand(Float64, length(nodes), length(nlist[1]), dof) inverseshapetensor = rand(Float64, length(nodes), dof, dof) deformationgradient = zeros(Float64, length(nodes), dof, dof)\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Geometry.compute_shape_tensors!-Tuple{Any, Any, Union{SubArray, Vector{Int64}}, Vararg{Any, 5}}","page":"IO","title":"PeriLab.IO.Geometry.compute_shape_tensors!","text":"compute_shape_tensors!(nodes::Union{SubArray, Vector{Int64}}, nlist, volume, omega, bond_damage, undeformed_bond, shape_tensor, inverse_shape_tensor)\n\nCalculate the shape tensor and its inverse for a set of nodes in a computational mechanics context.\n\nArguments\n\nnodes::Union{SubArray, Vector{Int64}}: A vector of integers representing node IDs.\ndof::Int64: An integer representing the degrees of freedom.\nnlist: A data structure (e.g., a list or array) representing neighboring node IDs for each node.\nvolume: A vector or array containing volume information for each node.\nomega: A vector or array containing omega information for each node.\nbond_damage: A data structure representing bond damage for each node.\nundeformed_bond: A data structure representing bond geometries for each node.\nshape_tensor: A preallocated 3D array to store the shape tensors for each node.\ninverse_shape_tensor: A preallocated 3D array to store the inverse shape tensors for each node.\n\nOutput\n\nshape_tensor: An updated shape_tensor array with calculated shape tensors.\ninverse_shape_tensor: An updated inverse_shape_tensor array with calculated inverse shape tensors.\n\nDescription\n\nThis function calculates the shape tensor and its inverse for a set of nodes in a computational mechanics context. The shape tensor is a key quantity used in continuum mechanics to describe material deformation. It is calculated based on bond damage, bond geometries, volume, and omega information for each node.\n\nFor each node in nodes, the function iterates through degrees of freedom (dof) and computes elements of the shape tensor. The inverse of the shape tensor is also calculated and stored in inverse_shape_tensor.\n\nExample\n\n```julia nodes = [1, 2, 3] dof = 3 nlist = [[2, 3], [1, 3], [1, 2]] volume = [0.1, 0.2, 0.3] omega = [0.5, 0.4, 0.6] bonddamage = zeros(Float64, length(nodes), length(nlist[1])) undeformedbond = rand(Float64, length(nodes), length(nlist[1]), dof) shapetensor = zeros(Float64, length(nodes), dof, dof) inverseshape_tensor = zeros(Float64, length(nodes), dof, dof)\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Geometry.compute_strain-Tuple{Union{Base.OneTo{Int64}, SubArray, Vector{Int64}}, Union{Array{Float64, 3}, SubArray}, Union{Array{Float64, 3}, SubArray}}","page":"IO","title":"PeriLab.IO.Geometry.compute_strain","text":"function compute_strain(nodes::Union{Base.OneTo{Int64},Vector{Int64}, SubArray}, deformation_gradient, strain)\n\nCalculate strains for specified nodes based on deformation gradients.\n\nArguments\n\nnodes::Union{SubArray, Vector{Int64}}: List of nodes\ndeformation_gradient: Deformation gradient at current time step (2D or 3D array).\n\nReturns\n\nUpdated strain array containing strains.\n\nThis function iterates over the specified nodes and computes strain at each node using the given deformation gradients.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Geometry.rotation_tensor-Tuple{Union{Vector{Float64}, Vector{Int64}}}","page":"IO","title":"PeriLab.IO.Geometry.rotation_tensor","text":"function rotation_tensor(angles::Vector{Float64})\n\nCreates the rotation tensor for 2D or 3D applications. Uses Rotations.jl package.\n\nArguments\n\nangles::Vector{Float64}: Vector of angles definede in degrees of length one or three\n\nReturns\n\nRotation tensor\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#parameter_handling","page":"IO","title":"parameter_handling","text":"","category":"section"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"Modules = [IO.Parameter_Handling]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.check_for_duplicates-Tuple{Vector{String}}","page":"IO","title":"PeriLab.IO.Parameter_Handling.check_for_duplicates","text":"check_for_duplicates(filenames)\n\nCheck for duplicate filenames.\n\nArguments\n\nfilenames::Vector{String}: The filenames\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_all_keys-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_all_keys","text":"get_all_keys(params::Dict)\n\nGet all the keys in the parameters\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nkeys_list::Array: The keys list\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_bc_definitions-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_bc_definitions","text":"get_bc_definitions(params::Dict)\n\nGet the boundary condition definitions\n\nArguments\n\nparams::Dict: The parameters\n\nReturns\n\nbcs::Dict{String,Any}: The boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_block_models-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_block_models","text":"get_block_models(params::Dict, block_id::Int64)\n\nGet the models of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\n\nReturns\n\nmodelDict::Dict{String,String}: The models of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_bond_filters-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_bond_filters","text":"get_bond_filters(params::Dict)\n\nReturns the bond filters from the parameters\n\nArguments\n\nparams::Dict: The parameters\n\nReturns\n\ncheck::Bool: Whether the bond filters are defined\nbfList::Dict{String,Dict{String,Any}}: The bond filters\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_calculation_options-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_calculation_options","text":"get_calculation_options(params::Dict)\n\nGet the calculation options\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nsolver_options::Dict: The solver options\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_computes-Tuple{Dict, Vector{String}}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_computes","text":"get_computes(params::Dict, variables::Vector{String})\n\nGet the computes.\n\nArguments\n\nparams::Dict: The parameters dictionary.\nvariables::Vector{String}: The variables.\n\nReturns\n\ncomputes::Dict{String,Dict{Any,Any}}: The computes.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_computes_names-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_computes_names","text":"get_computes_names(params::Dict)\n\nGet the names of the computes.\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\ncomputes_names::Vector{String}: The names of the computes.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_density-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_density","text":"get_density(params::Dict, block_id::Int64)\n\nGet the density of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\n\nReturns\n\ndensity::Float64: The density of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_external_topology_name-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_external_topology_name","text":"get_external_topology_name(params::Dict)\n\nReturns the name of the mesh file from the parameters\n\nArguments\n\nparams::Dict: The parameters\n\nReturns\n\nString: The name of the finite element topology file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_fem_block-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_fem_block","text":"get_fem_block(params::Dict, block_id::Int64)\n\nGet the fem_block of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\n\nReturns\n\nfem_block::Float64: The fem_block of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_final_time-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_final_time","text":"get_final_time(params::Dict)\n\nGet the final time\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nfinal_time::Float64: The final time\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_fixed_dt-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_fixed_dt","text":"get_fixed_dt(params::Dict)\n\nGet the fixed time step\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nfixed_dt::Float64: The fixed time step\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_flush_file-Tuple{Dict, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_flush_file","text":"get_flush_file(outputs::Dict, output::String)\n\nGets the flush file.\n\nArguments\n\noutputs::Dict: The outputs\noutput::String: The output\n\nReturns\n\nflush_file::Bool: The flush file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_header-Tuple{AbstractString}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_header","text":"get_header(filename::Union{String,AbstractString})\n\nReturns the header line and the header.\n\nArguments\n\nfilename::Union{String,AbstractString}: The filename of the file.\n\nReturns\n\nheader_line::Int: The header line.\nheader::Vector{String}: The header.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_heat_capacity-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_heat_capacity","text":"get_heat_capacity(params::Dict, block_id::Int64)\n\nGet the heat capacity of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\n\nReturns\n\nheat_capacity::Float64: The heat capacity of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_horizon-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_horizon","text":"get_horizon(params::Dict, block_id::Int64)\n\nGet the horizon of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\n\nReturns\n\nhorizon::Float64: The horizon of the block\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_initial_time-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_initial_time","text":"get_initial_time(params::Dict)\n\nGet the initial time\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\ninitial_time::Float64: The initial time\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_max_damage-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_max_damage","text":"getmaxdamage(params::Dict)\n\nGet the maximum damage.\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nwrite_after_damage::Bool: The value\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_mesh_name-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_mesh_name","text":"get_mesh_name(params::Dict)\n\nReturns the name of the mesh file from the parameters\n\nArguments\n\nparams::Dict: The parameters\n\nReturns\n\nString: The name of the mesh file\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_model_options-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_model_options","text":"get_model_options(params::Dict)\n\nGet the solver options\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nsolver_options::Dict: The solver options\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_model_parameter-Tuple{Dict, String, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_model_parameter","text":"get_model_parameter(params, model, id)\n\nRetrieve a model parameter from a dictionary of parameters.\n\nThis function retrieves a specific model parameter from a dictionary of parameters based on the provided model and identifier (id).\n\nArguments\n\nparams::Dict: A dictionary containing various parameters.\nmodel::String: The model type for which the parameter is sought.\nid::String: The identifier (name) of the specific model parameter.\n\nReturns\n\nparameter::Any: The retrieved model parameter, or nothing if the parameter is not found.\n\nErrors\n\nIf the specified model is defined in blocks but no model definition block exists, an error message is logged, and the function returns nothing.\nIf the model with the given identifier is defined in blocks but missing in the model's definition, an error message is logged, and the function returns nothing.\n\nExample\n\n```julia params = Dict(     \"Models\" => Dict(         \"Models\" => Dict(             \"ModelA\" => 42,             \"ModelB\" => 24         )     ) )\n\nmodel = \"Models\" id = \"ModelA\"\n\nresult = getmodelparameter(params, model, id) if result !== nothing     println(\"Parameter id: result\") else     println(\"Parameter not found.\") end\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_node_sets-Tuple{Dict, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_node_sets","text":"get_node_sets(params::Dict, path::String)\n\nReturns the node sets from the parameters\n\nArguments\n\nparams::Dict: The parameters\npath::String: The path to the mesh file\n\nReturns\n\nnsets::Dict{String,Any}: The node sets\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_nsteps-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_nsteps","text":"get_nsteps(params::Dict)\n\nGet the fixed time step\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nnsteps::Int64: The fixed time step\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_number_of_blocks-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_number_of_blocks","text":"get_number_of_blocks(params::Dict)\n\nGet the number of blocks.\n\nArguments\n\nparams::Dict: The parameters\n\nReturns\n\nnumber_of_blocks::Int64: The number of blocks\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_numerical_damping-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_numerical_damping","text":"get_numerical_damping(params::Dict)\n\nGet the numerical damping\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nnumerical_damping::Float64: The numerical damping\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_output_fieldnames-Tuple{Dict, Vector{String}, Vector{String}, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_output_fieldnames","text":"get_output_fieldnames(outputs::Dict, variables::Vector{String}, computes::Vector{String}, output_type::String)\n\nGets the output fieldnames.\n\nArguments\n\noutputs::Dict: The outputs\nvariables::Vector{String}: The variables\ncomputes::Vector{String}: The computes\noutput_type::String: The output type\n\nReturns\n\noutput_fieldnames::Vector{String}: The output fieldnames\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_output_filenames-Tuple{Dict, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_output_filenames","text":"get_output_filenames(params::Dict, output_dir::String)\n\nGets the output filenames.\n\nArguments\n\nparams::Dict: The parameters\noutput_dir::String: The file directory\n\nReturns\n\nfilenames::Vector{String}: The filenames\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_output_frequency-Tuple{Dict, Int64}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_output_frequency","text":"get_output_frequency(params::Dict, nsteps::Int64)\n\nGets the output frequency.\n\nArguments\n\nparams::Dict: The parameters\nnsteps::Int64: The number of steps\n\nReturns\n\nfreq::Vector{Int64}: The output frequency\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_output_type-Tuple{Dict, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_output_type","text":"get_output_type(outputs::Dict, output::String)\n\nGets the output type.\n\nArguments\n\noutputs::Dict: The outputs\noutput::String: The output\n\nReturns\n\noutput_type::String: The output type\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_output_variables-Tuple{String, Vector{String}}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_output_variables","text":"get_output_variables(output::String, variables::Vector{String})\n\nGet the output variable.\n\nArguments\n\noutput::String: The output variable.\nvariables::Vector{String}: The variables.\n\nReturns\n\noutput::String: The output variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_outputs-Tuple{Dict, Vector{String}, Vector{String}}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_outputs","text":"get_outputs(params::Dict, variables::Vector{String}, compute_names::Vector{String})\n\nGets the outputs.\n\nArguments\n\nparams::Dict: The parameters\nvariables::Vector{String}: The variables\ncompute_names::Vector{String}: The compute names\n\nReturns\n\noutputs::Dict: The outputs\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_safety_factor-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_safety_factor","text":"get_safety_factor(params::Dict)\n\nGet the safety factor\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nsafety_factor::Float64: The safety factor\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_solver_name-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_solver_name","text":"get_solver_name(params::Dict)\n\nGet the name of the solver\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nsolver_name::String: The name of the solver\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_values","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_values","text":"get_values(params::Dict, block_id::Int64, valueName::String, defaultValue::Union{Float64,Bool,Nothing})\n\nGet the value of a block.\n\nArguments\n\nparams::Dict: The parameters\nblock_id::Int64: The ID of the block\nvalueName::String: The name of the value\ndefaultValue::Union{Float64,Bool,Nothing: The default value\n\nReturns\n\nvalue::Float64: The value of the block\n\n\n\n\n\n","category":"function"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.get_write_after_damage-Tuple{Dict, String}","page":"IO","title":"PeriLab.IO.Parameter_Handling.get_write_after_damage","text":"get_write_after_damage(outputs::Dict, output::String)\n\nGet the write after damage.\n\nArguments\n\noutputs::Dict: The outputs\noutput::String: The output\n\nReturns\n\nwrite_after_damage::Bool: The value\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.validate_structure_recursive","page":"IO","title":"PeriLab.IO.Parameter_Handling.validate_structure_recursive","text":"validate_structure_recursive(expected::Dict, actual::Dict, validate::Bool, checked_keys::Array, path::String=\"\")\n\nValidates the parameters against the expected structure\n\nArguments\n\nexpected::Dict: The expected structure\nactual::Dict: The actual structure\nvalidate::Bool: The validation results\nchecked_keys::Array: The keys that have been checked\npath::String: The current path\n\nReturns\n\nvalidate::Bool: The validation result\nchecked_keys::Array: The keys that have been checked\n\n\n\n\n\n","category":"function"},{"location":"lib/io_functions/#PeriLab.IO.Parameter_Handling.validate_yaml-Tuple{Dict}","page":"IO","title":"PeriLab.IO.Parameter_Handling.validate_yaml","text":"validate_yaml(params::Dict)\n\nValidates the parameters against the expected structure\n\nArguments\n\nparams::Dict: The parameters dictionary.\n\nReturns\n\nparams::Dict: The parameters dictionary.\n\n\n\n\n\n","category":"method"},{"location":"lib/io_functions/","page":"IO","title":"IO","text":"","category":"page"},{"location":"man/basics/#First-Steps-with-PeriLab","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"","category":"section"},{"location":"man/basics/#Setting-up-the-Environment","page":"First Steps with PeriLab","title":"Setting up the Environment","text":"","category":"section"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"If want to use the PeriLab package you need to install it first. You can do it using the following commands:","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"using Pkg\n\nPkg.add(\"PeriLab\")","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"or","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"julia> ] # ']' should be pressed\n\n(@v1.9) pkg> add PeriLab","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"Additionally, it is recommended to check the version of PeriLab that you have installed with the status command.","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"julia> ]\n\n(@v1.9) pkg> status PeriLab\n      Status `~\\v1.6\\Project.toml`\n  [a93c6f00] PeriLab v1.0.0","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"Throughout the rest of the tutorial we will assume that you have installed the PeriLab package and have already typed using PeriLab which loads the package:","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"using PeriLab","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"If you want to make sure everything works as expected you can run the tests bundled with PeriLab:","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"using Pkg\n\nPkg.test(\"PeriLab\") # This will take a few minutes.","category":"page"},{"location":"man/basics/","page":"First Steps with PeriLab","title":"First Steps with PeriLab","text":"","category":"page"},{"location":"lib/links/#Useful-Tools-and-Links","page":"Useful Links","title":"Useful Tools and Links","text":"","category":"section"},{"location":"lib/links/","page":"Useful Links","title":"Useful Links","text":"Below you can find a summary of some useful tools and links, that can help you get started with PeriLab and Peridynamics.","category":"page"},{"location":"lib/links/","page":"Useful Links","title":"Useful Links","text":"Link Description\nPeriLab The source code for PeriLab\nDocker Image Ready to use Docker Image\nPeriLab-Results Web-service for PeriLab Results\nPeriHub Web-Framework and API for PeriLab\nParaView Open source visualization software\nYouTube Our YouTube channel\nJuliaHub Platform for scientific computing","category":"page"},{"location":"lib/links/","page":"Useful Links","title":"Useful Links","text":"If you want to contribute to the development of PeriLab, here are some recommended tools to get started:","category":"page"},{"location":"lib/links/","page":"Useful Links","title":"Useful Links","text":"Link Description\nVisual Studio Code Open source code editing\nJulia Open source programming language for scientific computing\nJulia Extension VS Code extension for Julia programming","category":"page"},{"location":"lib/links/","page":"Useful Links","title":"Useful Links","text":"","category":"page"},{"location":"man/bond_filter/#Bond-Filters","page":"Bond-Filter","title":"Bond-Filters","text":"","category":"section"},{"location":"man/bond_filter/#Rectangular-Plane","page":"Bond-Filter","title":"Rectangular Plane","text":"","category":"section"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"For a recangular plane following parameters needs to be defined:","category":"page"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"Normal X/Y/Z: Numeric values representing normal components. (Float64 or Int64)\nLower Left Corner X/Y/Z: Numeric values representing lower left corner components. (Float64 or Int64)\nBottom Unit Vector X/Y/Z: Numeric values representing bottom unit vector components. (Float64 or Int64)\nBottom Length: Numeric value representing the bottom length. (Float64 or Int64)\nSide Length: Numeric value representing the side length. (Float64 or Int64)","category":"page"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"(Image: Discretization_BondFilters_RectangularPlane)","category":"page"},{"location":"man/bond_filter/#Disk","page":"Bond-Filter","title":"Disk","text":"","category":"section"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"For a disk following parameters needs to be defined:","category":"page"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"Normal X/Y/Z: Numeric values representing normal components. (Float64 or Int64)\nCenter X/Y/Z: Numeric values representing center components. (Float64 or Int64)\nRadius: Numeric value representing the radius. (Float64 or Int64)","category":"page"},{"location":"man/bond_filter/","page":"Bond-Filter","title":"Bond-Filter","text":"","category":"page"},{"location":"lib/data_manager_functions/#Data-Manager-Functions","page":"Data Manager","title":"Data Manager - Functions","text":"","category":"section"},{"location":"lib/data_manager_functions/#Index","page":"Data Manager","title":"Index","text":"","category":"section"},{"location":"lib/data_manager_functions/","page":"Data Manager","title":"Data Manager","text":"Pages = [\"data_manager_functions.md\"]","category":"page"},{"location":"lib/data_manager_functions/","page":"Data Manager","title":"Data Manager","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/data_manager_functions/#Data_manager","page":"Data Manager","title":"Data_manager","text":"","category":"section"},{"location":"lib/data_manager_functions/","page":"Data Manager","title":"Data Manager","text":"Modules = [Data_manager]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.add_active_model-Tuple{String, Module}","page":"Data Manager","title":"PeriLab.Data_manager.add_active_model","text":"add_active_model(key::String, module_name::Module)\n\nAdd the main modules to an OrderedDict which are active.\n\nArguments\n\nkey::String: Name of the model.\nactive_module::Module: Module of the active models.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.check_property-Tuple{Int64, String}","page":"Data Manager","title":"PeriLab.Data_manager.check_property","text":"check_property(block_id::Int64, property::String)\n\nChecks if the specified property exists for the given block_id.\n\nArguments\n\nblock_id::Int64: The ID of the block.\nproperty::String: The name of the property to check.\n\nReturns\n\nBool: true if the property exists, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_bond_field","page":"Data Manager","title":"PeriLab.Data_manager.create_bond_field","text":"create_bond_field(name::String, type::Type, dof::Int64)\n\nCreates a bond field with the given name, data type, and degree of freedom.\n\nArguments\n\nname::String: The name of the bond field.\nvartype::Type: The data type of the bond field.\ndof::Int64: The degrees of freedom per bond.\nVectorOrArray::String (optional) - Vector or Materix; Default is vector\n\nReturns\n\nbond_field::Field: The created bond field for the current time step.\nbond_field_np1::Field: The created bond field for the next time step.\n\nExample:\n\ncreate_bond_field(\"stress\", Float64, 6)  # creates a stress bond field with 6 degrees of freedom\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_constant_bond_field","page":"Data Manager","title":"PeriLab.Data_manager.create_constant_bond_field","text":"create_constant_bond_field(name::String, type::Type, dof::Int64, default_value::Union{Int64,Float64,Bool}=0))\n\nCreates a constant bond field with the given name, data type, and degree of freedom.\n\nArguments\n\nname::String: The name of the bond field.\nvartype::Type: The data type of the bond field.\ndof::Int64: The degrees of freedom per bond.\ndefault_value::Union{Int64,Float64,Bool}=0) (optional) - filled with zero or false\n\nReturns\n\nconstant_bond_field::Field: The created constant bond field.\n\nExample:\n\ncreate_constant_bond_field(\"density\", Float64, 1)  # creates a density constant bond field\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_constant_element_field","page":"Data Manager","title":"PeriLab.Data_manager.create_constant_element_field","text":"create_constant_element_field(name::String, type::Type, dof::Int64)\n\nCreates a constant element field with the given name, data type, and degree of freedom.\n\nArguments\n\nname::String: The name of the element field.\nvartype::Type: The data type of the element field.\ndof::Int64: The degrees of freedom per element.\nVectorOrArray::String (optional) - Vector or Materix; Default is vector\n\nReturns\n\nconstant_element_field::Field: The created constant element field.\n\nExample:\n\ncreate_constant_element_field(\"temperature\", Float64, 1)  # creates a temperature constant element field\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_constant_node_field","page":"Data Manager","title":"PeriLab.Data_manager.create_constant_node_field","text":"create_constant_node_field(name::String, type::Type, dof::Int64)\n\nCreates a constant node field with the given name, data type, and degree of freedom.\n\nArguments\n\nname::String: The name of the node field.\nvartype::Type: The data type of the node field.\ndof::Int64: The degrees of freedom per node.\nVectorOrArray::String (optional) - Vector or Materix; Default is vector\n\nReturns\n\nconstant_node_field::Field: The created constant node field.\n\nExample:\n\ncreate_constant_node_field(\"temperature\", Float64, 1)  # creates a temperature constant node field\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_field","page":"Data Manager","title":"PeriLab.Data_manager.create_field","text":"create_field(name::String, vartype::Type, bondNode::String, dof::Int64, default_value::Any=0)\n\nCreate a field with the given name for the specified vartype. If the field already exists, return the existing field. If the field does not exist, create a new field with the specified characteristics.\n\nArguments\n\nname::String: The name of the field.\nvartype::Type: The data type of the field.\ndof::Int64: The degrees of freedom per node.\ndefault_value::Any: The default value of the field.\n\nReturns\n\nThe field with the given name and specified characteristics.\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.create_node_field","page":"Data Manager","title":"PeriLab.Data_manager.create_node_field","text":"create_node_field(name::String, type::Type, dof::Int64)\n\nCreates a node field with the given name, data type, and degree of freedom.\n\nArguments\n\nname::String: The name of the node field.\ntype::Type: The data type of the node field.\ndof::Int64: The degree of freedom of each node.\nVectorOrArray::String (optional) - Vector or Materix; Default is vector\n\nReturns\n\nnode_field::Field: The created node field for the current time step.\nnode_field_np1::Field: The created node field for the next time step.\n\nExample:\n\ncreate_node_field(\"displacement\", Float64, 3)  # creates a displacement node field with 3 degrees of freedom\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.fem_active-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.fem_active","text":"fem_active()\n\nReturns if FEM is active (true) or not (false).\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_NP1_to_N_Dict-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.get_NP1_to_N_Dict","text":"get_NP1_to_N_Dict()\n\nGet the NP1 to N dictionary\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_accuracy_order-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_accuracy_order","text":"get_accuracy_order()\n\nReturns the accuracy order for the \"bond associated correspondence\" implementation.\n\nArguments\n\nvalue::Int64: The value of the accuracy_order.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_active_models-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_active_models","text":"get_active_models()\n\nReturns a list active model modules.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_all_field_keys-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_all_field_keys","text":"get_all_field_keys()\n\nReturns a list of all field keys.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_aniso_crit_values-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_aniso_crit_values","text":"get_aniso_crit_values()\n\nRetrieves the critical values matrix.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_block_list-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_block_list","text":"get_block_list()\n\nReturns a list of all block IDs.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_bond_damage-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.get_bond_damage","text":"get_bond_damage(time::String)\n\nGet the bond damage\n\nArguments\n\ntime::String: The time of the field.\n\nReturns\n\ndamage::Field: The bond damage field.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_cancel-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_cancel","text":"get_cancel()\n\nThis function returns the cancel flag.\n\nReturns\n\ncancel::Bool: The value of the cancel variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_comm-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_comm","text":"get_comm()\n\nGet the MPI communicator\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_crit_values_matrix-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_crit_values_matrix","text":"get_crit_values_matrix()\n\nRetrieves the critical values matrix.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_damage-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.get_damage","text":"get_damage(time::String)\n\nGet the damage\n\nArguments\n\ntime::String: The time of the field.\n\nReturns\n\ndamage::Field: The damage field.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_damage_models-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_damage_models","text":"get_damage_models()\n\nThis function returns the damage_models variable.\n\nReturns\n\ndamage_models::Any: The value of the damage_models variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_dof-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_dof","text":"get_dof()\n\nRetrieves the degree of freedom (dof) value.\n\nReturns\n\ndof (integer): The current degree of freedom value.\n\nExample:\n\nget_dof()  # returns the current degree of freedom\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_element_rotation-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_element_rotation","text":"get_element_rotation()\n\nThis function returns the element_rotation flag.\n\nReturns\n\nelement_rotation::Bool: The value of the element_rotation variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_field-Tuple{String, String}","page":"Data Manager","title":"PeriLab.Data_manager.get_field","text":"get_field(name::String, time::String)\n\nReturns the field with the given name and time.\n\nArguments\n\nname::String: The name of the field.\ntime::String: The time of the field.\n\nReturns\n\nfield::Field: The field with the given name and time.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_field-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.get_field","text":"get_field(name::String)\n\nReturns the field with the given name.\n\nArguments\n\nname::String: The name of the field.\n\nReturns\n\nfield::Field: The field with the given name.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_field_type-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.get_field_type","text":"get_field_type()\n\nGet the type of a field\n\nReturns\n\nget_field_type (string): returns the type of a field\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_filtered_nlist-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_filtered_nlist","text":"get_filtered_nlist()\n\nGet the neighborhood list.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_inverse_nlist-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_inverse_nlist","text":"get_inverse_nlist()\n\nGet the inverse of the neighborhood list.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_local_nodes-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.get_local_nodes","text":"get_local_nodes()\n\nDetermines the local node numbering.\n\nReturns\n\nget_local_nodes (array): returns local nodes.\n\nExample:\n\nget_local_nodes()  # returns local nodes or if they do not exist at the core an empty array\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_max_rank-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_max_rank","text":"get_max_rank()\n\nThis function returns the maximal rank of MPI the max_rank.\n\nReturns\n\nmax_rank::Number: The value of the max_rank variable.\n\nExample\n\n```julia rank = getmaxrank()\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_nlist-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_nlist","text":"get_nlist()\n\nGet the neighborhood list.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_nnodes-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_nnodes","text":"get_nnodes()\n\nRetrieves the number of nodes.\n\nReturns\n\nnum_controller::Int64 : The current number of nodes.\n\nExample:\n\nget_nnodes()  # returns the current number of controler nodes. The neighbors are not included\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_nnsets-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_nnsets","text":"get_nnsets()\n\nGet the number of node sets.\n\nReturns\n\nnnsets::Int: The number of node sets.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_nsets-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_nsets","text":"get_nsets()\n\nGet the node sets\n\nReturns\n\nnsets::Dict{String,Vector{Int64}}: The node sets dictionary.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_num_elements-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_num_elements","text":"get_num_elements()\n\nGet the the number of finite elements\n\nReturns\n\nget_num_elements::Int64: The number of finite elements\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_num_responder-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_num_responder","text":"get_num_responder()\n\nGet the the number of responder nodes\n\nReturns\n\nnum_responder::Int64: The number of responder nodes\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_output_frequency-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_output_frequency","text":"get_output_frequency()\n\nThis function returns the output_frequency variable.\n\nReturns\n\noutput_frequency::Any: The value of the output_frequency variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_overlap_map-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_overlap_map","text":"get_overlap_map()\n\nGet the overlap map\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_pre_calculation_order-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_pre_calculation_order","text":"get_pre_calculation_order()\n\nreturn the order of the pre calculation.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_properties-Tuple{Int64, String}","page":"Data Manager","title":"PeriLab.Data_manager.get_properties","text":"get_properties(block_id::Int64, property::String)\n\nThis function retrieves the value of a specified property for a given block_id if it exists in the properties dictionary.\n\nArguments\n\nblock_id::Int64: The identifier of the block for which to retrieve the property.\nproperty::String: The dictionary entrycontaining the properties for the blocks.\n\nReturns\n\nproperty_value::Any: The value associated with the specified property for the given block_id.\nDict(): An empty dictionary if the specified property does not exist for the given block_id.\n\nExample\n\n```julia block_properties = Dict(     1 => Dict(\"color\" => \"red\", \"size\" => 10),     2 => Dict(\"color\" => \"blue\", \"height\" => 20) )\n\nRetrieve the 'color' property for block 1\n\ncolorvalue = getproperties(1, \"color\")  # Returns \"red\"\n\nTry to retrieve a non-existent property for block 2\n\nnonexistentvalue = get_properties(2, \"width\")  # Returns an empty dictionary\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_property-Tuple{Int64, String, String}","page":"Data Manager","title":"PeriLab.Data_manager.get_property","text":"get_property(block_id::Int64, property::String, value_name::String)\n\nThis function retrieves a specific value_name associated with a specified property for a given block_id if it exists in the properties dictionary.\n\nArguments\n\nblock_id::Int64: The identifier of the block for which to retrieve the property.\nproperty::String: The String property type (e.g. Material model) for the blocks.\nvalue_name::String: The name of the value within the specified property.\n\nReturns\n\nvalue::Any: The value associated with the specified value_name within the property for the given block_id.\nnothing: If the specified block_id, property, or value_name does not exist in the dictionary.\n\nExample\n\n```julia\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_rank-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_rank","text":"get_rank()\n\nThis function returns the rank of the core.\n\nReturns\n\nrank::Any: The value of the rank variable.\n\nExample\n\n```julia currentrank = getrank()\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_rotation-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_rotation","text":"get_rotation()\n\nThis function returns the rotation flag.\n\nReturns\n\nrotation::Bool: The value of the rotation variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_silent-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_silent","text":"get_silent()\n\nThis function returns the silent flag.\n\nReturns\n\nsilent::Bool: The value of the silent variable.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.get_synch_fields-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.get_synch_fields","text":"get_synch_fields()\n\nGet the fields to synchronize\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.has_key-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.has_key","text":"has_key(field_name::String)\n\nControl if a key exists.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.init_properties-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.init_properties","text":"init_properties()\n\nThis function initializes the properties dictionary. Order of dictionary defines, in which order the models are called later on.\n\nReturns\n\nkeys(properties[1]): The keys of the properties dictionary in defined order for the Model_Factory.jl.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.initialize_data-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.initialize_data","text":"initialize_data()\n\nInitialize all parameter in the datamanager and sets them to the default values.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.loc_to_glob-Tuple{UnitRange{Int64}}","page":"Data Manager","title":"PeriLab.Data_manager.loc_to_glob","text":"loc_to_glob(range::UnitRange{Int64})\n\nConverts the local index to the global index.\n\nArguments\n\nrange::UnitRange{Int64}: The range of the local index.\n\nExample:\n\nloc_to_glob(1:10)  # converts the local index to the global index\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.remove_active_model-Tuple{String}","page":"Data Manager","title":"PeriLab.Data_manager.remove_active_model","text":"remove_active_model(module_name::Module)\n\nRemoves main modules from OrderedDict.\n\nArguments\n\nkey::String: Key of the entry.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_accuracy_order-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_accuracy_order","text":"set_accuracy_order(value::Int64)\n\nSets the accuracy order for the \"bond associated correspondence\" implementation.\n\nArguments\n\nvalue::Int64: The value of the accuracy_order.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_aniso_crit_values-Tuple{Dict{Int64, Any}}","page":"Data Manager","title":"PeriLab.Data_manager.set_aniso_crit_values","text":"setanisocritvalues(critvalues::Dict{Int64,Any})\n\nSets the anisotropic critical values globally.\n\nArguments\n\ncrit_values::Dict{Int64,Any}: The critical values.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_block_list-Tuple{Union{SubArray, Vector{Int64}}}","page":"Data Manager","title":"PeriLab.Data_manager.set_block_list","text":"set_block_list(blocks::Union{SubArray,Vector{Int64}})\n\nSets the block list globally.\n\nArguments\n\nblocks::Union{SubArray,Vector{Int64}}: The block list.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_cancel-Tuple{Bool}","page":"Data Manager","title":"PeriLab.Data_manager.set_cancel","text":"set_cancel(value::Int64)\n\nSets the cancel flag.\n\nArguments\n\nvalue::Bool: The cancel flag.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_comm-Tuple{MPI.Comm}","page":"Data Manager","title":"PeriLab.Data_manager.set_comm","text":"set_comm(comm::MPI.Comm)\n\nSet the MPI communicator\n\nArguments\n\ncomm::MPI.Comm: MPI communicator\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_crit_values_matrix-Tuple{Array{Float64, 3}}","page":"Data Manager","title":"PeriLab.Data_manager.set_crit_values_matrix","text":"set_crit_values_matrix(crit_values::Array{Float64,3})\n\nSets the critical values matrix globally.\n\nArguments\n\ncrit_values::Array{Float64,3}: The critical values matrix.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_damage_models-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_damage_models","text":"set_damage_models(value)\n\nSets the damage models globally.\n\nArguments\n\nvalue: The value to set as the damage models.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_distribution-Tuple{Vector{Int64}}","page":"Data Manager","title":"PeriLab.Data_manager.set_distribution","text":"set_distribution(values::Vector{Int64})\n\nSets the distribution globally.\n\nArguments\n\nvalues::Vector{Int64}: The distribution.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_dof-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_dof","text":"set_dof(n::Int64)\n\nSets the degree of freedom (dof) value globally.\n\nArguments\n\nn::Int64: The value to set as the degree of freedom.\n\nExample:\n\nset_dof(3)  # sets the degree of freedom to 3\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_element_rotation-Tuple{Bool}","page":"Data Manager","title":"PeriLab.Data_manager.set_element_rotation","text":"set_element_rotation(value::Int64)\n\nSets the element_rotation flag.\n\nArguments\n\nvalue::Bool: The element_rotation flag.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_fem-Tuple{Bool}","page":"Data Manager","title":"PeriLab.Data_manager.set_fem","text":"set_fem(value::Bool)\n\nActivates and deactivates the FEM option in PeriLab\n\nArguments\n\nvalue::Bool: The value to set FEM active (true) or not (false).\n\nExample:\n\nset_fem(true)  # sets the fem_option to true\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_glob_to_loc-Tuple{Dict}","page":"Data Manager","title":"PeriLab.Data_manager.set_glob_to_loc","text":"set_glob_to_loc(dict)\n\nSets the global-to-local mapping dict globally.\n\nArguments\n\ndict (array): The dict representing the global-to-local mapping.\n\nExample:\n\nset_glob_to_loc([1, 3, 5])  # sets the global-to-local mapping dict\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_inverse_nlist-Tuple{Vector{Dict{Int64, Int64}}}","page":"Data Manager","title":"PeriLab.Data_manager.set_inverse_nlist","text":"set_inverse_nlist(inv_nlist::Vector{Dict{Int64,Int64}})\n\nSets the inverse nlist globally.\n\nArguments\n\ninv_nlist::Vector{Dict{Int64,Int64}}: The inverse nlist.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_material_models-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_material_models","text":"set_material_models(value)\n\nSets the material models globally.\n\nArguments\n\nvalue: The value to set as the material models.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_max_rank-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_max_rank","text":"set_max_rank(value::Int64)\n\nSets the maximum rank globally.\n\nArguments\n\nvalue::Int64: The value to set as the maximum rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_nnodes-Tuple{}","page":"Data Manager","title":"PeriLab.Data_manager.set_nnodes","text":"set_nnodes()\n\nSets the number all nodes of one core globally.\n\nArguments\n\nExample: ```\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_nnsets-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_nnsets","text":"set_nnsets(n::Int64)\n\nSet the number of node sets.\n\nArguments\n\nn::Int64: The number of node sets to be set.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_nset-Tuple{String, Vector{Int64}}","page":"Data Manager","title":"PeriLab.Data_manager.set_nset","text":"set_nset(name, nodes)\n\nSet the nodes associated with a named node set.\n\nArguments\n\nname::String: The name of the node set.\nnodes::Vector{Int}: The node indices associated with the node set.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_num_controller-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_num_controller","text":"set_num_controller(n::Int64)\n\nSets the number of controller nodes globally. For one core the number of nodes is equal to the number of controller nodes.\n\nArguments\n\nn::Int64: The value to set as the number of nodes.\n\nExample:\n\nset_num_controller(10)  # sets the number of nodes to 10\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_num_responder-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_num_responder","text":"set_num_responder(n::Int64)\n\nSets the number of responder nodes globally. For one core the number of responder is zero. responder hold the information of the neighbors, of one node, but are not evaluated.\n\nArguments\n\nn::Int64: The value to set as the number of nodes.\n\nExample:\n\nset_num_responder(10)  # sets the number of responder nodes to 10\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_output_frequency-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_output_frequency","text":"set_output_frequency(value)\n\nSets the output frequency globally.\n\nArguments\n\nvalue: The value to set as the output frequency.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_overlap_map-Tuple{Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_overlap_map","text":"set_overlap_map(topo)\n\nSets the overlap map globally.\n\nArguments\n\ntopo: The overlap map.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_pre_calculation_order-Tuple{Vector{String}}","page":"Data Manager","title":"PeriLab.Data_manager.set_pre_calculation_order","text":"set_pre_calculation_order(values::Vector{String})\n\nSets the order of the pre calculation options globally.\n\nArguments\n\nvalues::Vector{String}: The order of models.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_properties-Tuple{Any, Any, Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_properties","text":"set_properties(block_id, property, values)\n\nSets the values of a specified property for a given block_id.\n\nArguments\n\nblock_id::Int64: The identifier of the block for which to set the property.\nproperty::String: The name of the property.\nvalues::Any: The values to set for the specified property.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_properties-Tuple{Any, Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_properties","text":"set_properties(property, values)\n\nSets the values of a specified property for a all blocks. E.g. for FEM, because it corresponds not to a block yet,\n\nArguments\n\nproperty::String: The name of the property.\nvalues::Any: The values to set for the specified property.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_property-Tuple{Int64, String, String, Any}","page":"Data Manager","title":"PeriLab.Data_manager.set_property","text":"set_property(block_id, property, value_name, value)\n\nSets the value of a specified property for a given block_id.\n\nArguments\n\nblock_id::Int64: The identifier of the block for which to set the property.\nproperty::String: The name of the property.\nvalue_name::String: The name of the value within the specified property.\nvalue::Any: The value to set for the specified value_name.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_rank-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.set_rank","text":"set_rank(value::Int64)\n\nSets the rank globally.\n\nArguments\n\nvalue::Int64: The value to set as the rank.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_rotation-Tuple{Bool}","page":"Data Manager","title":"PeriLab.Data_manager.set_rotation","text":"set_rotation(value::Int64)\n\nSets the rotation flag.\n\nArguments\n\nvalue::Bool: The rotation flag.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_silent-Tuple{Bool}","page":"Data Manager","title":"PeriLab.Data_manager.set_silent","text":"set_silent(value::Int64)\n\nSets the silent flag.\n\nArguments\n\nvalue::Bool: The silent flag.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.set_synch","page":"Data Manager","title":"PeriLab.Data_manager.set_synch","text":"set_synch(name, download_from_cores, upload_to_cores)\n\nSets the synchronization dictionary globally.\n\nArguments\n\nname::String: The name of the field.\ndownload_from_cores::Bool: Whether to download the field from the cores.\nupload_to_cores::Bool: Whether to upload the field to the cores.\n\n\n\n\n\n","category":"function"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.switch_NP1_to_N-Tuple{Int64}","page":"Data Manager","title":"PeriLab.Data_manager.switch_NP1_to_N","text":"switch_NP1_to_N()\n\nSwitches the fields from NP1 to N.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/#PeriLab.Data_manager.synch_manager-Tuple{Any, String}","page":"Data Manager","title":"PeriLab.Data_manager.synch_manager","text":"synch_manager(synchronise_field, direction::String)\n\nSynchronises the fields.\n\nArguments\n\nsynchronise_field: The function to synchronise the field.\ndirection::String: The direction of the synchronisation.\n\n\n\n\n\n","category":"method"},{"location":"lib/data_manager_functions/","page":"Data Manager","title":"Data Manager","text":"","category":"page"},{"location":"man/solver/solver/#Solver","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"Parameter Type Optional Description\nMaterial Models Bool Yes Activates the time integration for materials and material evaluation\nDamage Models Bool Yes Activates the damage evaluation\nThermal Models Bool Yes Activates the time integration for thermal models and thermal model evaluation\nAdditive Models Bool Yes Activates the additive model evaluation\nMaximum Damage Float Yes Defines the maximum damage in one point\nInitial Time Float No Defines the initial time\nFinal Time Float No Defines the final time\nNumerical Damping Float Yes Defines a damping factor\nVerlet Dict Yes Defines the Verlet solver","category":"page"},{"location":"man/solver/solver/#Verlet","page":"Solver","title":"Verlet","text":"","category":"section"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"Parameter Type Optional Description\nSafety Factor Float Yes Defines a scaling factor for the time increment\nFixed dt Float Yes Defines a fixed time step\nNumber of Steps Int Yes Defines a fixed number of steps","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"warning: Fixed dt\nIf a fixed time step is defined, the time integration can become unstable.","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"The Verlet time integration is used as standard solver for dynamic hyperbolic differential equation of motion. It is also used in Peridigm [2]. The displacements for step i+1 are solved as follows","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"mathbfu_i+1 = mathbfu_i + Delta tdotmathbfu_i + frac12 Delta t^2ddotmathbfu_i","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"with ","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"ddotmathbfu_i = fracmathbfF_irho","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"where rho is the mass density of the point and mathbfF_i=mathbfF_external-mathbfF_internal for the current time step.","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"For parabolic hyperbolic time integration as in temperature models the following schema is used","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"boldsymboltau_i+1 =  boldsymboltau_i - Delta t fracmathbfHrho C_v","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"where rho is the mass density, C_v is the specific heat capacity and mathbfH is the heat flux of each point [7].","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"For the time intergration a stable increment has to be determined.","category":"page"},{"location":"man/solver/solver/","page":"Solver","title":"Solver","text":"","category":"page"},{"location":"theory/theory/#Theory-manual","page":"Basics","title":"Theory manual","text":"","category":"section"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"The theory manual condenses the implemented features.","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"Peridynamics is an integral continuum mechanics formulation. For a pure mechanical description it can be formulated as:","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"int_mathcalHunderlinemathbfTlanglemathbfxtrangle-underlinemathbfTlanglemathbfxtrangle dV- mathbfb=rhoddotmathbfu","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"The parameters are:","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"Parameter Name\nmathcalH Neighborhood [-]\nV Volume [m^3]\nmathbfx Position of point [m]\nmathbfx Position of neighbor [m]\nt Time [s]\nmathbfb Body force densities [Nm^3]\nmathbfu Displacements [m]\nddotmathbfu Accelerations [ms^2]\nunderlinemathbfT Force density state [Nm^6]\nrho Mass density [kgm^3]","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"To solve this three main types of formulations are usable; bond-based, ordinary state-based and non-ordinary state-based.","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"Method Related Model in PeriLab\nBond-based Bond-based Elastic\nOrdinary state-based PD Solid Elastic PD Solid Plastic\nNon-ordinary state-based Correspondence Elastic Correspondence Plastic","category":"page"},{"location":"theory/theory/","page":"Basics","title":"Basics","text":"","category":"page"},{"location":"lib/faq/#PeriLab-Frequently-Asked-Questions-(FAQ)","page":"FAQ","title":"PeriLab - Frequently Asked Questions (FAQ)","text":"","category":"section"},{"location":"lib/faq/#General-Questions","page":"FAQ","title":"General Questions","text":"","category":"section"},{"location":"lib/faq/#What-is-PeriLab?","page":"FAQ","title":"What is PeriLab?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"PeriLab is a peridynamic simulation software designed for different kind of mechanical problems.","category":"page"},{"location":"lib/faq/#Installation-and-Setup","page":"FAQ","title":"Installation and Setup","text":"","category":"section"},{"location":"lib/faq/#What-are-the-system-requirements-for-installing-PeriLab?","page":"FAQ","title":"What are the system requirements for installing PeriLab?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"In order to install PeriLab, you will need to have a recent version of Julia or Docker installed on your system.","category":"page"},{"location":"lib/faq/#How-do-I-update-my-PeriLab-software?","page":"FAQ","title":"How do I update my PeriLab software?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"To update PeriLab you just need to run julia -e \"using Pkg; Pkg.update()\" or pull the latest version of the PeriLab Docker image.","category":"page"},{"location":"lib/faq/#Simulation-and-Analysis","page":"FAQ","title":"Simulation and Analysis","text":"","category":"section"},{"location":"lib/faq/#How-can-I-generate-my-own-input-mesh?","page":"FAQ","title":"How can I generate my own input mesh?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"There are multiple options to generate your own input mesh:","category":"page"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"Use the Perihub framework to generate your own input mesh.\nGenerate your own input mesh with julia, here is an example.\nCreate a .png image of your 2D model and translate it with this script.\nUse an existing Abaqus Inputfile (.inp).\nTransfer your mesh using meshio\nCreate a feature issue and let us know what you need.","category":"page"},{"location":"lib/faq/#What-to-do-with-my-results?","page":"FAQ","title":"What to do with my results?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"First of all congratulations 🎉 on the success of your simulation. Now, you can take a look at your results. To do that, you can use ParaView it's free and very powerful.","category":"page"},{"location":"lib/faq/#Can-I-customize-parameters-for-my-simulations-in-PeriLab?","page":"FAQ","title":"Can I customize parameters for my simulations in PeriLab?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"Yes, PeriLab allows users to customize various parameters to tailor simulations based on their specific requirements.","category":"page"},{"location":"lib/faq/#Troubleshooting","page":"FAQ","title":"Troubleshooting","text":"","category":"section"},{"location":"lib/faq/#I'm-experiencing-technical-issues-with-PeriLab.-What-should-I-do?","page":"FAQ","title":"I'm experiencing technical issues with PeriLab. What should I do?","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"If you encounter technical issues, please create an issue and describe it in detail.","category":"page"},{"location":"lib/faq/#Additional-Assistance","page":"FAQ","title":"Additional Assistance","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"If your question is not addressed here, please feel free to contact us or create an issue for further assistance.","category":"page"},{"location":"lib/faq/#Contributions","page":"FAQ","title":"Contributions","text":"","category":"section"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"Contributions are always welcomed, take a look at the Contributing Guidelines","category":"page"},{"location":"lib/faq/","page":"FAQ","title":"FAQ","text":"","category":"page"},{"location":"lib/model_factory_functions/#Model-Factory-Functions","page":"Model Factory","title":"Model Factory - Functions","text":"","category":"section"},{"location":"lib/model_factory_functions/#Index","page":"Model Factory","title":"Index","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Pages = [\"model_factory_functions.md\"]","category":"page"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/model_factory_functions/#Models","page":"Model Factory","title":"Models","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.add_model-Tuple{Module, String}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.add_model","text":"add_model(datamanager::Module, model_name::String)\n\nIncludes the models in the datamanager and checks if the model definition is correct or not.\n\nArguments\n\ndatamanager::Module: Datamanager\nmodel_name::String: The block nodes\n\nReturns\n\ndatamanager::Module: Datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.compute_models-Tuple{Module, Dict{Int64, Vector{Int64}}, Float64, Float64, Vector{String}, Any, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.compute_models","text":"compute_models(datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}, dt::Float64, time::Float64, options::Vector{String}, synchronise_field, to::TimerOutput)\n\nComputes the models models\n\nArguments\n\ndatamanager::Module: The datamanager\nblock_nodes::Dict{Int64,Vector{Int64}}: The block nodes\ndt::Float64: The time step\ntime::Float64: The current time of the solver\noptions::Vector{String}: The options\nsynchronise_field: The synchronise field\nto::TimerOutput: The timer output\n\nReturns\n\ndatamanager: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.get_block_model_definition-Tuple{Dict, Vector{Int64}, Vector{String}, Any}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.get_block_model_definition","text":"get_block_model_definition(params::Dict, block_id::Int64, prop_keys::Vector{String}, properties)\n\nGet block model definition.\n\nSpecial case for pre calculation. It is set to all blocks, if no block definition is defined, but pre calculation is.\n\nArguments\n\nparams::Dict: Parameters.\nblocks::Vector{Int64}: List of block id's.\nprop_keys::Vector{String}: Property keys.\nproperties: Properties function.\n\nReturns\n\nproperties: Properties function.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.init_models-Tuple{Dict, Module, Dict{Int64, Vector{Int64}}, Dict, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.init_models","text":"init_models(params::Dict, datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}, solver_options::Dict)\n\nInitialize models\n\nArguments\n\nparams::Dict: Parameters.\ndatamanager::Module: Datamanager.\nblock_nodes::Dict{Int64,Vector{Int64}}: block nodes.\nsolver_options::Dict: Solver options.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.read_properties-Tuple{Dict, Module, Bool}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.read_properties","text":"read_properties(params::Dict, datamanager::Module, material_model::Bool)\n\nRead properties of material.\n\nArguments\n\nparams::Dict: Parameters.\ndatamanager::Data_manager: Datamanager.\nmaterial_model::Bool: Material model.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.set_heat_capacity-Tuple{Dict, Dict, Vector{Float64}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.set_heat_capacity","text":"set_heat_capacity(params::Dict, block_nodes::Dict, heat_capacity::Vector{Float64})\n\nSets the heat capacity of the nodes in the dictionary.\n\nArguments\n\nparams::Dict: The parameters\nblock_nodes::Dict: The block nodes\nheat_capacity::Vector{Float64}: The heat capacity array\n\nReturns\n\nheat_capacity::SubArray: The heat capacity array\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Additive","page":"Model Factory","title":"Additive","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Additive]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Additive.compute_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Dict, Int64, Float64, Float64, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Additive.compute_model","text":"compute_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, model_param::Dict, block::Int64, time::Float64, dt::Float64,to::TimerOutput,)\n\nComputes the addtive models\n\nArguments\n\ndatamanager::Module: The datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes\nmodel_param::Dict: The model parameters\nblock::Int64: The block\ntime::Float64: The current time\ndt::Float64: The time step\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Additive.init_fields-Tuple{Module}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Additive.init_fields","text":"init_fields(datamanager::Module)\n\nInitialize additive model fields\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Additive.init_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Additive.init_model","text":"init_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, block::Int64)\n\nInitialize the additive models.\n\nArguments\n\ndatamanager::Module: The data manager module where the additive model will be initialized.\nnodes::Union{SubArray,Vector{Int64}}: Nodes for the additive model.\nblock::Int64: Block identifier for the additive model.\n\nReturns\n\ndatamanager: The modified data manager module with the initialized additive model.\n\nExample\n\n```julia datamanager = initmodel(mydata_manager, [1, 2, 3], 1)\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Damage","page":"Model Factory","title":"Damage","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Damage]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.compute_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Dict, Int64, Float64, Float64, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.compute_model","text":"compute_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, model_param::Dict, block::Int64, time::Float64, dt::Float64,to::TimerOutput,)\n\nComputes the damage model\n\nArguments\n\ndatamanager::Module: The datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes\nmodel_param::Dict: The model parameters\nblock::Int64: The block\ntime::Float64: The current time\ndt::Float64: The time step\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.damage_index-Tuple{Module, Union{SubArray, Vector{Int64}}, Vector{Vector{Int64}}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.damage_index","text":"damage_index(datamanager,::Union{SubArray, Vector{Int64})\n\nFunction calculates the damage index related to the neighborhood volume for a set of corresponding nodes. The damage index is defined as damaged volume in relation the neighborhood volume. damageIndex = sumi (brokenBondsi * volume_i) / volumeNeighborhood\n\nArguments\n\ndatamanager::Data_manager: all model data\nnodes::Union{SubArray, Vector{Int64}}: corresponding nodes to this model\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.init_aniso_crit_values-Tuple{Module, Dict, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.init_aniso_crit_values","text":"init_aniso_crit_values(datamanager::Module, params::Dict, block_id::Int64)\n\nInitialize the anisotropic critical values\n\nArguments\n\ndatamanager::Module: The datamanager\nparams::Dict: The parameters\nblock_id::Int64: current block\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.init_fields-Tuple{Module}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.init_fields","text":"init_fields(datamanager::Module)\n\nInitialize damage model fields\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nparams::Dict: Parameters.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.init_interface_crit_values-Tuple{Module, Dict, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.init_interface_crit_values","text":"init_interface_crit_values(datamanager::Module, params::Dict, block_id::Int64)\n\nInitialize the critical values\n\nArguments\n\ndatamanager::Module: The datamanager\nparams::Dict: The parameters\nblock_id::Int64: current block\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.init_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.init_model","text":"init_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, block::Int64)\n\nInitialize the damage models.\n\nArguments\n\ndatamanager::Module: The data manager module where the corrosion model will be initialized.\nnodes::Union{SubArray,Vector{Int64}}: Nodes for the corrosion model.\nblock::Int64: Block identifier for the corrosion model.\n\nReturns\n\ndatamanager: The modified data manager module with the initialized corrosion model.\n\nExample\n\n```julia datamanager = initmodel(mydata_manager, [1, 2, 3], 1)\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Damage.synch_field-Tuple{Module, String, Any}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Damage.synch_field","text":"synch_field(datamanager::Module, damage_model::String, synchronise_field)\n\nField for synchronisation.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\ndamage_model::String: The damage model\nsynchronise_field: Synchronise function to distribute parameter through cores.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Material","page":"Model Factory","title":"Material","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Material]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.check_material_symmetry-Tuple{Int64, Dict}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.check_material_symmetry","text":"check_material_symmetry(dof::Int64, prop::Dict)\n\nCheck the symmetry of the material.\n\nArguments\n\ndof::Int64: The degree of freedom.\nprop::Dict: The material property.\n\nReturns\n\nprop::Dict: The material property.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.compute_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Dict, Int64, Float64, Float64, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.compute_model","text":"compute_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, model_param::Dict, block::Int64, time::Float64, dt::Float64,to::TimerOutput,)\n\nComputes the material models\n\nArguments\n\ndatamanager::Module: The datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes\nmodel_param::Dict: The model parameters\nblock::Int64: The block\ntime::Float64: The current time\ndt::Float64: The time step\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.determine_isotropic_parameter-Tuple{Module, Dict}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.determine_isotropic_parameter","text":"determine_isotropic_parameter(datamanager::Module, prop::Dict)\n\nDetermine the isotropic parameter.\n\nArguments\n\nprop::Dict: The material property.\n\nReturns\n\nprop::Dict: The material property.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.distribute_force_densities-Tuple{Module, Union{SubArray, Vector{Int64}}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.distribute_force_densities","text":"distribute_force_densities(datamanager::Module, nodes::Union{SubArray,Vector{Int64}})\n\nDistribute the force densities.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.fields_for_local_synchronization-Tuple{Dict}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.fields_for_local_synchronization","text":"fields_for_local_synchronization(model_param::Dict)\n\nFinds all synchronization fields from the model class\n\nArguments\n\nmodel_param::Dict: model parameter.\n\nReturns\n\nsynch_dict::Dict: Synchronization Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.init_fields-Tuple{Module}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.init_fields","text":"init_fields(datamanager::Module)\n\nInitialize material model fields\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.init_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.init_model","text":"init_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}, block::Int64)\n\nInitializes the material model.\n\nArguments\n\ndatamanager::Data_manager: Datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\nblock::Int64: Block.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Thermal","page":"Model Factory","title":"Thermal","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Thermal]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Thermal.compute_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Dict, Int64, Float64, Float64, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Thermal.compute_model","text":"compute_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, model_param::Dict, block::Int64, time::Float64, dt::Float64,to::TimerOutput,)\n\nComputes the thermal models\n\nArguments\n\ndatamanager::Module: The datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes\nmodel_param::Dict: The model parameters\nblock::Int64: The block\ntime::Float64: The current time\ndt::Float64: The time step\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Thermal.init_fields-Tuple{Module}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Thermal.init_fields","text":"init_fields(datamanager::Module)\n\nInitialize thermal model fields\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Thermal.init_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Thermal.init_model","text":"init_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}, block::Int64)\n\nInitializes the thermal model.\n\nArguments\n\ndatamanager::Data_manager: Datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\nblock::Int64: Block.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Pre_Calculation","page":"Model Factory","title":"Pre_Calculation","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Pre_Calculation]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Pre_Calculation.check_dependencies-Tuple{Module, Dict{Int64, Vector{Int64}}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Pre_Calculation.check_dependencies","text":"check_dependencies(datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}\n\nCheck if materials are used which needs a form of pre calculation. If so, the option will be set.\n\nArguments\n\ndatamanager::Module: Datamanager.\nblock_nodes::Dict{Int64,Vector{Int64}}: block nodes.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Pre_Calculation.compute_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Union{Dict, OrderedCollections.OrderedDict}, Int64, Float64, Float64, TimerOutputs.TimerOutput}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Pre_Calculation.compute_model","text":"compute_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, model_param::Dict, block::Int64, time::Float64, dt::Float64,to::TimerOutput,)\n\nComputes the pre calculation models\n\nArguments\n\ndatamanager::Module: The datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes\nmodel_param::Dict: The model parameters\nblock::Int64: The block\ntime::Float64: The current time\ndt::Float64: The time step\n\nReturns\n\ndatamanager::Module: The datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Pre_Calculation.fields_for_local_synchronization-Tuple{Dict}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Pre_Calculation.fields_for_local_synchronization","text":"fields_for_local_synchronization(model_param::Dict)\n\nFinds all synchronization fields from the model class\n\nArguments\n\nmodel_param::Dict: model parameter.\n\nReturns\n\nsynch_dict::Dict: Synchronization Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Pre_Calculation.init_fields-Tuple{Module}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Pre_Calculation.init_fields","text":"init_fields(datamanager::Module)\n\nInitializes the fields.\n\nArguments\n\ndatamanager::Data_manager: Datamanager\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Pre_Calculation.init_model-Tuple{Module, Union{SubArray, Vector{Int64}}, Int64}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Pre_Calculation.init_model","text":"init_model(datamanager::Module, nodes::Union{SubArray,Vector{Int64}, block::Int64)\n\nInitializes the model.\n\nArguments\n\ndatamanager::Data_manager: Datamanager\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\nblock::Int64: Block.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#Set_modules","page":"Model Factory","title":"Set_modules","text":"","category":"section"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"Modules = [Solver.Model_Factory.Material.Set_modules]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.Set_modules.create_module_specifics-Tuple{Union{String, SubString}, Vector{Any}, Dict{String, String}, Tuple}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.Set_modules.create_module_specifics","text":"create_module_specifics(name::String, module_list::Dict{String,AbstractString}(),specifics::Dict{String,String}(), values::Tuple)\n\nSearches for a specific function within a list of modules and calls that function if found.\n\nThis function iterates over a list of modules specified in module_list and looks for a module-specific function specified in the specifics dictionary. If the module and function are found, it calls that function with the provided values tuple.\n\nArguments\n\nname::String: The name to match against the module names.\nmodule_list::Dict{String, AbstractString}: A dictionary of module names mapped to abstract strings.\nspecifics::Dict{String, String}: A dictionary specifying the module-specific function to call for each module.\nvalues::Tuple: A tuple of values to be passed as arguments to the module-specific function.\n\nExample\n\n```julia modulelist = Dict(\"Module1\" => \"Module1Name\", \"Module2\" => \"Module2Name\") specifics = Dict(\"Module1Name\" => \"module1function\", \"Module2Name\" => \"module2function\") values = (arg1, arg2) createmodulespecifics(\"Module1Name\", modulelist, specifics, values)\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.Set_modules.create_module_specifics-Tuple{Union{String, SubString}, Vector{Any}, Dict{String, String}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.Set_modules.create_module_specifics","text":"create_module_specifics(name::String, module_list::Dict{String,AbstractString}(),specifics::Dict{String,String}())\n# Returns: the function itself\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.Set_modules.find_jl_files-Tuple{AbstractString}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.Set_modules.find_jl_files","text":"find_jl_files(directory::AbstractString)\n\nRecursively find Julia files (.jl) in a directory.\n\nThis function recursively searches for Julia source files with the \".jl\" extension in the specified directory and its subdirectories. It returns a vector of file paths for all the found .jl files.\n\nArguments\n\ndirectory::AbstractString: The directory in which to search for .jl files.\n\nReturns\n\nA vector of strings, where each string is a file path to a .jl file found in the specified directory and its subdirectories.\n\nExample\n\n```julia jlfiles = findjlfiles(\"/path/to/modules\") for jlfile in jlfiles     println(\"Found Julia file: \", jlfile) end\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.Set_modules.find_module_files-Tuple{AbstractString, String}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.Set_modules.find_module_files","text":"find_module_files(directory::AbstractString, specific::String)\n\nSearch for Julia modules containing a specific function in a given directory.\n\nThis function searches for Julia modules (files with .jl extension) in the specified directory and checks if they contain a specific function. It returns a list of dictionaries where each dictionary contains the file path and the name of the module where the specific function is found.\n\nArguments\n\ndirectory::AbstractString: The directory to search for Julia modules.\nspecific::String: The name of the specific function to search for.\n\nReturns\n\nAn array of dictionaries, where each dictionary has the following keys:\n\n\"File\": The file path to the module where the specific function is found.\n\"Module Name\": The name of the module where the specific function is found.\n\nExample\n\n```julia result = findmodulefiles(\"/path/to/modules\", \"myfunction\") for moduleinfo in result     println(\"Function found in module: \", moduleinfo[\"Module Name\"])     println(\"Module file path: \", moduleinfo[\"File\"]) end\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/#PeriLab.Solver.Model_Factory.Material.Set_modules.include_files-Tuple{Vector{Any}}","page":"Model Factory","title":"PeriLab.Solver.Model_Factory.Material.Set_modules.include_files","text":"include_files(module_list::Vector{Any})\n\nInclude files specified in a list of modules.\n\nThis function iterates over a list of modules and includes the files specified in each module's \"File\" key.\n\nArguments\n\nmodule_list::Vector{Any}: A list of modules where each module is expected to be a dictionary-like object with a \"File\" key specifying the file path.\n\nExamples\n\n```julia include_files([Dict(\"File\" => \"module1.jl\"), Dict(\"File\" => \"module2.jl\")])\n\n\n\n\n\n","category":"method"},{"location":"lib/model_factory_functions/","page":"Model Factory","title":"Model Factory","text":"","category":"page"},{"location":"theory/theory_bondbased/#Bond-based-Peridynamics","page":"Bond-based","title":"Bond-based Peridynamics","text":"","category":"section"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"Bond-based Peridynamics is a nonlocal extension of classical continuum mechanics, designed to address discontinuities like cracks within materials. Unlike traditional methods, which use partial differential equations (PDEs) and are based on local interactions, Peridynamics operates on integral equations and accounts for long-range forces.","category":"page"},{"location":"theory/theory_bondbased/#Fundamental-Concepts","page":"Bond-based","title":"Fundamental Concepts","text":"","category":"section"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"In bond-based Peridynamics, the material is considered as a continuum of particles that interact with each other through bonds. These interactions are not limited to immediate neighbors, allowing the framework to naturally handle the initiation and propagation of cracks.","category":"page"},{"location":"theory/theory_bondbased/#Equation-of-Motion","page":"Bond-based","title":"Equation of Motion","text":"","category":"section"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"The equation of motion in Peridynamics is an integral equation, differing from the local PDEs in classical mechanics. For a particle at position mathbfx, the equation is:","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"rho(mathbfx) ddotmathbfu(mathbfx t) = int_mathcalH mathbff(mathbfx mathbfx t)  dV + mathbfb(mathbfx t)","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"where: rho(mathbfx) is the mass density at mathbfx. ddotmathbfu(mathbfx t) is the acceleration at point mathbfx. mathcalH represents the horizon around mathbfx, within which interactions occur. mathbfb(mathbfx t) is the body force term.","category":"page"},{"location":"theory/theory_bondbased/#Interaction","page":"Bond-based","title":"Interaction","text":"","category":"section"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"The fundamental interaction in bond-based Peridynamics is between pairs of points or particles within a certain horizon distance. The force vector between two points, x and x, is given by:","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"mathbff(mathbfx mathbfx) = underlineomegalangle boldsymbolxi rangle c  (mathbfu(mathbfx) - mathbfu(mathbfx))","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"where: mathbff(mathbfx mathbfx) is the force vector exerted by the particle at mathbfx on the particle at mathbfx. c is a bond modulus representing the stiffness of the bond. underlineomegalangle boldsymbolxi rangle is a bond-associated influence function. mathbfu(mathbfx) is the displacement of the particle at mathbfx.","category":"page"},{"location":"theory/theory_bondbased/#Bond-Moduli","page":"Bond-based","title":"Bond Moduli","text":"","category":"section"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"From [8] we get","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"Dimension Bond Stiffness Poisson's ratio\nplane strain: c = frac48 Epi 5 delta^3 fixed nu=025\nplane stress: c = frac9 Epi delta^3 fixed nu=13\n3D: c = frac18 Kpi  delta^4 fixed nu=025","category":"page"},{"location":"theory/theory_bondbased/","page":"Bond-based","title":"Bond-based","text":"","category":"page"},{"location":"man/dev/developement_guide/#Development-Guide","page":"Guide","title":"Development Guide","text":"","category":"section"},{"location":"man/dev/developement_guide/","page":"Guide","title":"Guide","text":"PeriLab is design to be extentable. Modules can be integrated with the so called factory modules. These modules are the interfaces to the higher functions. ","category":"page"},{"location":"man/dev/developement_guide/","page":"Guide","title":"Guide","text":"info: Example\nThe solver calls compute_forces as a function. This function is integrated in the Material module. Within this module the relevant material model is integrated, using the set_modules module","category":"page"},{"location":"man/dev/developement_guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"lib/mpi_functions/#MPI-Functions","page":"MPI","title":"MPI - Functions","text":"","category":"section"},{"location":"lib/mpi_functions/#Index","page":"MPI","title":"Index","text":"","category":"section"},{"location":"lib/mpi_functions/","page":"MPI","title":"MPI","text":"Pages = [\"mpi_functions.md\"]","category":"page"},{"location":"lib/mpi_functions/","page":"MPI","title":"MPI","text":"CurrentModule = PeriLab.IO","category":"page"},{"location":"lib/mpi_functions/#MPI","page":"MPI","title":"MPI","text":"","category":"section"},{"location":"lib/mpi_functions/","page":"MPI","title":"MPI","text":"send_single_value_from_vector\nsynch_responder_to_controller\nsynch_controller_to_responder\nsynch_controller_bonds_to_responder\nsplit_vector\nsynch_controller_bonds_to_responder_flattened\nsend_vector_from_root_to_core_i\nsend_value\nfind_and_set_core_value_min\nfind_and_set_core_value_max\nfind_and_set_core_value_sum\nfind_and_set_core_value_avg\ngather_values","category":"page"},{"location":"lib/mpi_functions/#PeriLab.IO.send_single_value_from_vector","page":"MPI","title":"PeriLab.IO.send_single_value_from_vector","text":"send_single_value_from_vector(comm::MPI.Comm, controller::Int64, values::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}, type::Type)\n\nSends a single value from a vector to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nvalues::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The values\ntype::Type: The type\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.synch_responder_to_controller","page":"MPI","title":"PeriLab.IO.synch_responder_to_controller","text":"synch_responder_to_controller(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the responder to the controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.synch_controller_to_responder","page":"MPI","title":"PeriLab.IO.synch_controller_to_responder","text":"synch_controller_to_responder(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the controller to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.synch_controller_bonds_to_responder","page":"MPI","title":"PeriLab.IO.synch_controller_bonds_to_responder","text":"synch_controller_bonds_to_responder(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.split_vector","page":"MPI","title":"PeriLab.IO.split_vector","text":"split_vector(input, row_nums, dof)\n\nSplit a vector into a vector of matrices\n\nArguments\n\ninput::Vector: The input vector\nrow_nums::Vector: The row numbers\ndof::Int: The degree of freedom\n\nReturns\n\nresult::Vector: The result vector\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.synch_controller_bonds_to_responder_flattened","page":"MPI","title":"PeriLab.IO.synch_controller_bonds_to_responder_flattened","text":"synch_controller_bonds_to_responder_flattened(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.send_vector_from_root_to_core_i","page":"MPI","title":"PeriLab.IO.send_vector_from_root_to_core_i","text":"send_vector_from_root_to_core_i(comm::MPI.Comm, send_msg, recv_msg, distribution)\n\nSends a vector from the root to the core i\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The receive message\ndistribution::Vector{Int64}: The distribution\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.send_value","page":"MPI","title":"PeriLab.IO.send_value","text":"send_value(comm::MPI.Comm, controller, send_msg)\n\nSends a value to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.find_and_set_core_value_min","page":"MPI","title":"PeriLab.IO.find_and_set_core_value_min","text":"find_and_set_core_value_min(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value min\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.find_and_set_core_value_max","page":"MPI","title":"PeriLab.IO.find_and_set_core_value_max","text":"find_and_set_core_value_max(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value max\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.find_and_set_core_value_sum","page":"MPI","title":"PeriLab.IO.find_and_set_core_value_sum","text":"find_and_set_core_value_sum(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value sum\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.find_and_set_core_value_avg","page":"MPI","title":"PeriLab.IO.find_and_set_core_value_avg","text":"find_and_set_core_value_avg(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value avg\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/#PeriLab.IO.gather_values","page":"MPI","title":"PeriLab.IO.gather_values","text":"gather_values(comm::MPI.Comm, value::Any)\n\nGather values\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Any: The value\n\nReturns\n\nrecv_msg::Any: The received message\n\n\n\n\n\n","category":"function"},{"location":"lib/mpi_functions/","page":"MPI","title":"MPI","text":"","category":"page"},{"location":"man/dev/datamanager/#Datamanager","page":"Datamanager","title":"Datamanager","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"The datamanager is a central part of PeriLab. You can create fields as you need them. ","category":"page"},{"location":"man/dev/datamanager/#Create-constant-node-fields","page":"Datamanager","title":"Create constant node fields","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Constant node fields are fields with the length of the number of nodes. It return one vector of type Type_of_variable. ","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"field = datamanager.create_constant_node_field(Fieldname::String, Type_of_variable::Type, Degree_of_freedom::Int64)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can get constant fields  ","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"field = datamanager.get_field(Fieldname::String)","category":"page"},{"location":"man/dev/datamanager/#Create-non-constant-node-fields","page":"Datamanager","title":"Create non-constant node fields","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Non-constant node fields are fields with the length of the number of nodes. Each node could have any degree of freedom.  You will get a field with N and N+1 created it by this command","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"fieldN, fieldNP1 = datamanager.create_node_field(Fieldname::String, Type_of_variable::Type, Degree_of_freedom::Int64)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"info: Switch values\nThe non-constant fields are switched automatically at the end of each time integration step. At the beginning of the next step NP1 is zero, wheras N is the NP1 from the previous step.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can get non-constant fields as   ","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"fieldN = datamanager.get_field(Fieldname::String, \"N\")\nfieldNP1 = datamanager.get_field(Fieldname::String, \"NP1\")\nfieldN = datamanager.get_field(Fieldname*\"N\"::String)\nfieldNP1 = datamanager.get_field(Fieldname*\"NP1\"::String)","category":"page"},{"location":"man/dev/datamanager/#Create-constant-bond-fields","page":"Datamanager","title":"Create constant bond fields","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Constant bond fields are fields with the length of the number of nodes. Each node has a vector of lenght number of neighbors or bonds with a defined degree of freedom. It return one vector of type Type_of_variable.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"field = datamanager.create_constant_node_field(Fieldname::String, Type_of_variable::Type, Degree_of_freedom::Int64)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can get constant fields  ","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"field = datamanager.get_field(Fieldname::String)","category":"page"},{"location":"man/dev/datamanager/#Create-non-constant-bond-fields","page":"Datamanager","title":"Create non-constant bond fields","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Non-constant node fields are fields with the length of the number of nodes. Each node has a vector of lenght number of neighbors or bonds with a defined degree of freedom.  You will get a field of type Type_of_variable with N and N+1 created it by this command","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"fieldN, fieldNP1 = datamanager.create_bond_field(Fieldname::String, Type_of_variable::Type, Degree_of_freedom::Int64)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"info: Switch values\nThe non-constant fields are switched automatically at the end of each time integration step. At the beginning of the next step NP1 is zero, wheras N is the NP1 from the previous step.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can get non-constant fields as   ","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"fieldN = datamanager.get_field(Fieldname::String, \"N\")\nfieldNP1 = datamanager.get_field(Fieldname::String, \"NP1\")\nfieldN = datamanager.get_field(Fieldname*\"N\"::String)\nfieldNP1 = datamanager.get_field(Fieldname*\"NP1\"::String)","category":"page"},{"location":"man/dev/datamanager/#Other-Options","page":"Datamanager","title":"Other Options","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"For node and bond fields (constant and non-constant) the following options are possible.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Matrix style","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can switch between vector and matrix. If you give the keyword MatrixorVector = \"Vector\" you get vector of length degree of freedom for each node or bond. If MatrixorVector = \"Matrix\" each node or bond gets matrix dof times dof","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"datamanager.create_node_field(Fieldname::String, Type_of_variable::Type, Matrix_or_Vector::String, Degree_of_freedom::Int64)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Pre-defined Values","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"You can add an optional value at the end. The default is zero.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"datamanager.create_node_field(Fieldname::String, Type_of_variable::Type, Degree_of_freedom::Int64, Value::Type_of_variable)","category":"page"},{"location":"man/dev/datamanager/#Create-free-size-fields","page":"Datamanager","title":"Create free size fields","text":"","category":"section"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"Free size fields can be constant or non-constant. The size is defined by the user and must be a tuple. The field dimension is chosen by the user.","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":" field = datamanager.create_constant_free_size_field(Fieldname::String, Type_of_variable::Type, size::Tuple)\n fieldN, fieldNP1 = datamanager.create_free_size_field(Fieldname::String, Type_of_variable::Type, size::Tuple)","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"info: free size example\nA constant node field with a matrix 3times3 per node can be defined in a free size field by","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"field = datamanager.create_constant_free_size_field(\"Example\", Float64, (number_of_nodes, 3, 3))","category":"page"},{"location":"man/dev/datamanager/","page":"Datamanager","title":"Datamanager","text":"","category":"page"},{"location":"lib/solver_functions/#Solver-Functions","page":"Solver","title":"Solver - Functions","text":"","category":"section"},{"location":"lib/solver_functions/#Index","page":"Solver","title":"Index","text":"","category":"section"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"Pages = [\"solver_functions.md\"]","category":"page"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/solver_functions/#Solver","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"Modules = [Solver]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/solver_functions/#PeriLab.Solver.find_and_set_core_value_avg-Tuple{MPI.Comm, Union{Float64, Int64}, Int64}","page":"Solver","title":"PeriLab.Solver.find_and_set_core_value_avg","text":"find_and_set_core_value_avg(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value avg\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.find_and_set_core_value_max-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.find_and_set_core_value_max","text":"find_and_set_core_value_max(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value max\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.find_and_set_core_value_min-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.find_and_set_core_value_min","text":"find_and_set_core_value_min(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value min\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.find_and_set_core_value_sum-Tuple{MPI.Comm, Union{Bool, Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.find_and_set_core_value_sum","text":"find_and_set_core_value_sum(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value sum\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.gather_values-Tuple{MPI.Comm, Any}","page":"Solver","title":"PeriLab.Solver.gather_values","text":"gather_values(comm::MPI.Comm, value::Any)\n\nGather values\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Any: The value\n\nReturns\n\nrecv_msg::Any: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.get_block_nodes-Tuple{Any, Any}","page":"Solver","title":"PeriLab.Solver.get_block_nodes","text":"get_block_nodes(block_ids, nnodes)\n\nReturns a dictionary mapping block IDs to collections of nodes.\n\nArguments\n\nblock_ids::Vector{Int64}: A vector of block IDs\nnnodes::Int64: The number of nodes\n\nReturns\n\nblock_nodes::Dict{Int64,Vector{Int64}}: A dictionary mapping block IDs to collections of nodes\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.init-Tuple{Dict, Module, TimerOutputs.TimerOutput}","page":"Solver","title":"PeriLab.Solver.init","text":"init(params::Dict, datamanager::Module)\n\nInitialize the solver\n\nArguments\n\nparams::Dict: The parameters\ndatamanager::Module: Datamanager\nto::TimerOutputs.TimerOutput: A timer output\n\nReturns\n\nblock_nodes::Dict{Int64,Vector{Int64}}: A dictionary mapping block IDs to collections of nodes.\nbcs::Dict{Any,Any}: A dictionary containing boundary conditions.\ndatamanager::Module: The data manager module that provides access to data fields and properties.\nsolver_options::Dict{String,Any}: A dictionary containing solver options.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.remove_models-Tuple{Module, Vector{String}}","page":"Solver","title":"PeriLab.Solver.remove_models","text":"remove_models(datamanager::Module, solver_options::Vector{String})\n\nSets the active models to false if they are deactivated in the solver. They can be active, because they are defined as model and in the blocks.\n\nArguments\n\ndatamanager::Module: The MPI communicator\nsolver_options::Vector{String}: A dictionary of fields\n\nReturns\n\ndatamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.send_single_value_from_vector-Tuple{MPI.Comm, Int64, Union{Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}}, Type}","page":"Solver","title":"PeriLab.Solver.send_single_value_from_vector","text":"send_single_value_from_vector(comm::MPI.Comm, controller::Int64, values::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}, type::Type)\n\nSends a single value from a vector to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nvalues::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The values\ntype::Type: The type\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.send_value-Tuple{MPI.Comm, Any, Any}","page":"Solver","title":"PeriLab.Solver.send_value","text":"send_value(comm::MPI.Comm, controller, send_msg)\n\nSends a value to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.send_vector_from_root_to_core_i-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.send_vector_from_root_to_core_i","text":"send_vector_from_root_to_core_i(comm::MPI.Comm, send_msg, recv_msg, distribution)\n\nSends a vector from the root to the core i\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The receive message\ndistribution::Vector{Int64}: The distribution\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.set_density-Tuple{Dict, Dict, Vector{Float64}}","page":"Solver","title":"PeriLab.Solver.set_density","text":"set_density(params::Dict, block_nodes::Dict, density::Vector{Float64})\n\nSets the density of the nodes in the dictionary.\n\nArguments\n\nparams::Dict: The parameters\nblock_nodes::Dict: A dictionary mapping block IDs to collections of nodes\ndensity::Vector{Float64}: The density\n\nReturns\n\ndensity::Vector{Float64}: The density\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.set_fem_block-Tuple{Dict, Dict, Vector{Bool}}","page":"Solver","title":"PeriLab.Solver.set_fem_block","text":"set_fem_block(params::Dict, block_nodes::Dict, fem_block::Vector{Bool})\n\nSets the fem_block of the nodes in the dictionary.\n\nArguments\n\nparams::Dict: The parameters\nblock_nodes::Dict: A dictionary mapping block IDs to collections of nodes\nfem_block::Vector{Bool}: The fem_block\n\nReturns\n\nfem_block::Vector{Bool}: The fem_block\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.set_horizon-Tuple{Dict, Dict, Vector{Float64}}","page":"Solver","title":"PeriLab.Solver.set_horizon","text":"set_horizon(params::Dict, block_nodes::Dict, horizon::Vector{Float64})\n\nSets the horizon of the nodes in the dictionary.\n\nArguments\n\nparams::Dict: The parameters\nblock_nodes::Dict: A dictionary mapping block IDs to collections of nodes\nhorizon::Vector{Float64}: The horizon\n\nReturns\n\nhorizon::Vector{Float64}: The horizon\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.solver-Tuple{Dict{Any, Any}, Dict{Int64, Vector{Int64}}, Dict{Any, Any}, Module, Dict{Int64, Dict}, Vector{Dict}, Any, Any, Bool}","page":"Solver","title":"PeriLab.Solver.solver","text":"solver(solver_options::Dict{String,Any}, block_nodes::Dict{Int64,Vector{Int64}}, bcs::Dict{Any,Any}, datamanager::Module, outputs::Dict{Int64,Dict{}}, result_files::Vector{Any}, write_results, to, silent::Bool)\n\nRuns the solver.\n\nArguments\n\nsolver_options::Dict{String,Any}: The solver options\nblock_nodes::Dict{Int64,Vector{Int64}}: A dictionary mapping block IDs to collections of nodes\nbcs::Dict{Any,Any}: The boundary conditions\ndatamanager::Module: The data manager module\noutputs::Dict{Int64,Dict{}}: A dictionary for output settings\nresult_files::Vector{Any}: A vector of result files\nwrite_results: A function to write simulation results\nto::TimerOutputs.TimerOutput: A timer output\nsilent::Bool: A boolean flag to suppress progress bars\n\nReturns\n\nresult_files: A vector of updated result files\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.split_vector-Tuple{Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.split_vector","text":"split_vector(input, row_nums, dof)\n\nSplit a vector into a vector of matrices\n\nArguments\n\ninput::Vector: The input vector\nrow_nums::Vector: The row numbers\ndof::Int: The degree of freedom\n\nReturns\n\nresult::Vector: The result vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.synch_controller_bonds_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.synch_controller_bonds_to_responder","text":"synch_controller_bonds_to_responder(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.synch_controller_bonds_to_responder_flattened-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.synch_controller_bonds_to_responder_flattened","text":"synch_controller_bonds_to_responder_flattened(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.synch_controller_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.synch_controller_to_responder","text":"synch_controller_to_responder(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the controller to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.synch_responder_to_controller-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.synch_responder_to_controller","text":"synch_responder_to_controller(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the responder to the controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.synchronise_field-Tuple{Any, Dict, Any, Any, String, String}","page":"Solver","title":"PeriLab.Solver.synchronise_field","text":"synchronise_field(comm, synch_fields::Dict, overlap_map, get_field, synch_field::String, direction::String)\n\nSynchronises field.\n\nArguments\n\ncomm: The MPI communicator\nsynch_fields::Dict: A dictionary of fields\noverlap_map: The overlap map\nget_field: The function to get the field\nsynch_field::String: The field\ndirection::String: The direction\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#Verlet","page":"Solver","title":"Verlet","text":"","category":"section"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"Modules = [Solver.Verlet]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.calculate_strain-Tuple{Module, Union{SubArray, Vector{Int64}}, Union{Matrix{Float64}, StaticArraysCore.SMatrix, StaticArraysCore.MMatrix}}","page":"Solver","title":"PeriLab.Solver.Verlet.calculate_strain","text":"calculate_strain(datamanager::Module, nodes::Union{SubArray,Vector{Int64}}, hooke_matrix::Matrix{Float64})\n\nCalculate the von Mises stress.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\nhooke_matrix::Matrix{Float64}: The hooke matrix.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.calculate_stresses-Tuple{Module, Dict{Int64, Vector{Int64}}, Dict{String, Any}}","page":"Solver","title":"PeriLab.Solver.Verlet.calculate_stresses","text":"calculate_stresses(datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}, options::Dict{String, Any})\n\nComputes the stresses.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nblock_nodes::Dict{Int64,Vector{Int64}}: List of block nodes.\noptions::Dict{String, Any}: List of options.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.calculate_von_mises_stress-Tuple{Module, Union{SubArray, Vector{Int64}}}","page":"Solver","title":"PeriLab.Solver.Verlet.calculate_von_mises_stress","text":"calculate_von_mises_stress(datamanager::Module, nodes::Union{SubArray,Vector{Int64}})\n\nCalculate the von Mises stress.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nnodes::Union{SubArray,Vector{Int64}}: The nodes.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.compute_crititical_time_step-Tuple{Module, Dict{Int64, Vector{Int64}}, Bool, Bool}","page":"Solver","title":"PeriLab.Solver.Verlet.compute_crititical_time_step","text":"compute_crititical_time_step(datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}, mechanical::Bool, thermo::Bool)\n\nCalculate the critical time step for a simulation considering both mechanical and thermodynamic aspects.\n\nThis function computes the critical time step by considering mechanical and thermodynamic properties of different blocks. The resulting critical time step is based on the smallest critical time step found among the blocks.\n\nArguments\n\ndatamanager::Module: The data manager module that provides access to required data fields and properties.\nblock_nodes::Dict{Int64, Vector{Int64}}: A dictionary mapping block IDs to collections of nodes.\nmechanical::Bool: If true, mechanical properties are considered in the calculation.\nthermo::Bool: If true, thermodynamic properties are considered in the calculation.\n\nReturns\n\nFloat64: The calculated critical time step based on the smallest critical time step found among the blocks.\n\nDependencies\n\nThis function may depend on the following functions:\n\ncompute_thermodynamic_critical_time_step: Used if thermo is true to calculate thermodynamic critical time steps.\ncompute_mechanical_critical_time_step: Used if mechanical is true to calculate mechanical critical time steps.\nThe availability of specific properties from the data manager module.\n\nErrors\n\nIf required properties are not available in the data manager, it may raise an error message.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.compute_mechanical_critical_time_step-Tuple{Union{SubArray, Vector{Int64}}, Module, Union{Float64, Int64, SubArray, Vector{Float64}}}","page":"Solver","title":"PeriLab.Solver.Verlet.compute_mechanical_critical_time_step","text":"compute_mechanical_critical_time_step(nodes::Union{SubArray,Vector{Int64}}, datamanager::Module, bulk_modulus::Float64)\n\nCalculate the critical time step for a mechanical simulation using a bond-based approximation [10].\n\nThis function iterates over a collection of nodes and computes the critical time step for each node based on the given input data and parameters.\n\nArguments\n\nnodes::Union{SubArray, Vector{Int64}}: The collection of nodes to calculate the critical time step for.\ndatamanager::Module: The data manager module that provides access to required data fields.\nbulk_modulus::Float64: The bulk modulus used in the calculations.\n\nReturns\n\nFloat64: The calculated critical time step for the mechanical simulation.\n\nDependencies\n\nThis function depends on the following data fields from the datamanager module:\n\nget_nlist(): Returns the neighbor list.\nget_field(\"Density\"): Returns the density field.\nget_field(\"Bond Length\"): Returns the bond distance field.\nget_field(\"Volume\"): Returns the volume field.\nget_field(\"Horizon\"): Returns the horizon field.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.compute_thermodynamic_critical_time_step-Tuple{Union{SubArray, Vector{Int64}}, Module, Union{Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.Verlet.compute_thermodynamic_critical_time_step","text":"compute_thermodynamic_critical_time_step(nodes::Union{SubArray,Vector{Int64}}, datamanager::Module, lambda::Float64, Cv::Float64)\n\nCalculate the critical time step for a thermodynamic simulation based on  [11].\n\nThis function iterates over a collection of nodes and computes the critical time step for each node using provided input data and parameters.\n\nArguments\n\nnodes::Union{SubArray, Vector{Int64}}: The collection of nodes to calculate the critical time step for.\ndatamanager::Module: The data manager module that provides access to required data fields.\nlambda::Float64: The material parameter used in the calculations.\nCv::Float64: The heat capacity at constant volume used in the calculations.\n\nReturns\n\nFloat64: The calculated critical time step for the thermodynamic simulation.\n\nDependencies\n\nThis function depends on the following data fields from the datamanager module:\n\nget_nlist(): Returns the neighbor list.\nget_field(\"Density\"): Returns the density field.\nget_field(\"Bond Length\"): Returns the bond distance field.\nget_field(\"Volume\"): Returns the volume field.\nget_field(\"Number of Neighbors\"): Returns the number of neighbors field.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.find_and_set_core_value_avg-Tuple{MPI.Comm, Union{Float64, Int64}, Int64}","page":"Solver","title":"PeriLab.Solver.Verlet.find_and_set_core_value_avg","text":"find_and_set_core_value_avg(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value avg\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.find_and_set_core_value_max-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.Verlet.find_and_set_core_value_max","text":"find_and_set_core_value_max(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value max\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.find_and_set_core_value_min-Tuple{MPI.Comm, Union{Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.Verlet.find_and_set_core_value_min","text":"find_and_set_core_value_min(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value min\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.find_and_set_core_value_sum-Tuple{MPI.Comm, Union{Bool, Float64, Int64}}","page":"Solver","title":"PeriLab.Solver.Verlet.find_and_set_core_value_sum","text":"find_and_set_core_value_sum(comm::MPI.Comm, value::Union{Float64,Int64})\n\nFind and set core value sum\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Union{Float64,Int64}: The value\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.gather_values-Tuple{MPI.Comm, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.gather_values","text":"gather_values(comm::MPI.Comm, value::Any)\n\nGather values\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nvalue::Any: The value\n\nReturns\n\nrecv_msg::Any: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.get_cs_denominator-Tuple{Union{Vector{Float64}, Vector{Int64}, SubArray}, Union{Vector{Float64}, Vector{Int64}, SubArray}}","page":"Solver","title":"PeriLab.Solver.Verlet.get_cs_denominator","text":"get_cs_denominator(volume::Union{SubArray,Vector{Float64},Vector{Int64}}, undeformed_bond::Union{SubArray,Vector{Float64},Vector{Int64}})\n\nCalculate the denominator for the critical time step calculation.\n\nArguments\n\nvolume::Union{SubArray,Vector{Float64},Vector{Int64}}: The volume field.\nundeformed_bond::Union{SubArray,Vector{Float64},Vector{Int64}}: The undeformed bond field.\n\nReturns\n\nFloat64: The denominator for the critical time step calculation.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.get_forces_from_force_density-Tuple{Module}","page":"Solver","title":"PeriLab.Solver.Verlet.get_forces_from_force_density","text":"get_forces_from_force_density(datamanager::Module)\n\nComputes the forces from the force densities.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.get_integration_steps-Tuple{Float64, Float64, Float64}","page":"Solver","title":"PeriLab.Solver.Verlet.get_integration_steps","text":"get_integration_steps(initial_time::Float64, end_time::Float64, dt::Float64)\n\nCalculate the number of integration steps and the adjusted time step for a numerical integration process.\n\nArguments\n\ninitial_time::Float64: The initial time for the integration.\nend_time::Float64: The final time for the integration.\ndt::Float64: The time step size.\n\nReturns\n\nA tuple (nsteps, dt) where:\n\nnsteps::Int64: The number of integration steps required to cover the specified time range.\ndt::Float64: The adjusted time step size to evenly divide the time range.\n\nErrors\n\nThrows an error if the dt is less than or equal to zero.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.get_partial_stresses-Tuple{Module, Union{SubArray, Vector{Int64}}}","page":"Solver","title":"PeriLab.Solver.Verlet.get_partial_stresses","text":"get_partial_stresses(datamanager::Module, nodes::Vector{Int64})\n\nComputes the partial stresses.\n\nArguments\n\ndatamanager::Data_manager: Datamanager.\nnodes::Vector{Int64}: List of block nodes.\n\nReturns\n\ndatamanager::Data_manager: Datamanager.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.init_solver-Tuple{Dict, Module, Dict{Int64, Vector{Int64}}, Bool, Bool}","page":"Solver","title":"PeriLab.Solver.Verlet.init_solver","text":"init_solver(params::Dict, datamanager::Module, block_nodes::Dict{Int64,Vector{Int64}}, mechanical::Bool, thermo::Bool)\n\nInitialize the Verlet solver for a simulation.\n\nThis function sets up the Verlet solver for a simulation by initializing various parameters and calculating the time step based on provided parameters or critical time step calculations.\n\nArguments\n\nparams::Dict: A dictionary containing simulation parameters.\ndatamanager::Module: The data manager module that provides access to required data fields and properties.\nblock_nodes::Dict{Int64,Vector{Int64}}: A dictionary mapping block IDs to collections of nodes.\nmechanical::Bool: If true, mechanical properties are considered in the calculation.\nthermo::Bool: If true, thermodynamic properties are considered in the calculation.\n\nReturns\n\nA tuple (initial_time, dt, nsteps, numerical_damping) where:\n\ninitial_time::Float64: The initial time for the simulation.\ndt::Float64: The time step for the simulation.\nnsteps::Int64: The number of time integration steps.\nnumerical_damping::Float64: The numerical damping factor.\nmax_damage::Float64: The maximum damage in the simulation.\n\nDependencies\n\nThis function may depend on the following functions:\n\nget_initial_time, get_final_time, get_safety_factor, get_fixed_dt: Used to retrieve simulation parameters.\ncompute_crititical_time_step: Used to calculate the critical time step if dt is not fixed.\nget_integration_steps: Used to determine the number of integration steps and adjust the time step.\nfind_and_set_core_value_min and find_and_set_core_value_max: Used to set core values in a distributed computing environment.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.run_solver-Tuple{Dict{Any, Any}, Dict{Int64, Vector{Int64}}, Dict{Any, Any}, Module, Dict{Int64, Dict}, Vector{Dict}, Any, Any, TimerOutputs.TimerOutput, Bool}","page":"Solver","title":"PeriLab.Solver.Verlet.run_solver","text":"run_solver(\n    solver_options::Dict{Any,Any},\n    block_nodes::Dict{Int64,Vector{Int64}},\n    bcs::Dict{Any,Any},\n    datamanager::Module,\n    outputs::Dict{Int64,Dict{}},\n    result_files::Vector{Any},\n    synchronise_field,\n    write_results,\n    to::TimerOutputs.TimerOutput,\n    silent::Bool\n)\n\nRun the Verlet solver for a simulation based on the strategy provided in [1] and  [2].\n\nThis function performs the Verlet solver simulation, updating various data fields and properties over a specified number of time steps.\n\nArguments\n\nsolver_options::Dict{String,Any}: A dictionary containing solver options and parameters.\nblock_nodes::Dict{Int64,Vector{Int64}}: A dictionary mapping block IDs to collections of nodes.\nbcs::Dict{Any,Any}: A dictionary containing boundary conditions.\ndatamanager::Module: The data manager module that provides access to data fields and properties.\noutputs::Dict{Int64,Dict{}}: A dictionary for output settings.\nresult_files::Vector{Any}: A vector of result files.\nsynchronise_field: A function for synchronization.\nwrite_results: A function to write simulation results.\nto::TimerOutputs.TimerOutput: A timer output.\nsilent::Bool: A boolean flag to suppress progress bars.\n\nReturns\n\nresult_files: A vector of updated result files.\n\nDependencies\n\nThis function depends on various data fields and properties from the datamanager module, as well as several helper functions. It also relies on solver options and boundary conditions provided in the input parameters.\n\nFunction Workflow\n\nInitialize simulation parameters and data fields.\nPerform Verlet integration over a specified number of time steps.\nUpdate data fields and properties based on the solver options.\nWrite simulation results using the write_results function.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.send_single_value_from_vector-Tuple{MPI.Comm, Int64, Union{Int64, Vector{Bool}, Vector{Float64}, Vector{Int64}}, Type}","page":"Solver","title":"PeriLab.Solver.Verlet.send_single_value_from_vector","text":"send_single_value_from_vector(comm::MPI.Comm, controller::Int64, values::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}, type::Type)\n\nSends a single value from a vector to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nvalues::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The values\ntype::Type: The type\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.send_value-Tuple{MPI.Comm, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.send_value","text":"send_value(comm::MPI.Comm, controller, send_msg)\n\nSends a value to a controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\ncontroller::Int64: The controller\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.send_vector_from_root_to_core_i-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.send_vector_from_root_to_core_i","text":"send_vector_from_root_to_core_i(comm::MPI.Comm, send_msg, recv_msg, distribution)\n\nSends a vector from the root to the core i\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\nsend_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The send message\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The receive message\ndistribution::Vector{Int64}: The distribution\n\nReturns\n\nrecv_msg::Union{Int64,Vector{Float64},Vector{Int64},Vector{Bool}}: The received message\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.split_vector-Tuple{Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.split_vector","text":"split_vector(input, row_nums, dof)\n\nSplit a vector into a vector of matrices\n\nArguments\n\ninput::Vector: The input vector\nrow_nums::Vector: The row numbers\ndof::Int: The degree of freedom\n\nReturns\n\nresult::Vector: The result vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.synch_controller_bonds_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.synch_controller_bonds_to_responder","text":"synch_controller_bonds_to_responder(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.synch_controller_bonds_to_responder_flattened-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.synch_controller_bonds_to_responder_flattened","text":"synch_controller_bonds_to_responder_flattened(comm::MPI.Comm, overlapnodes, array, dof)\n\nSynch the controller bonds to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\narray::Array: The array\ndof::Int: The degree of freedom\n\nReturns\n\narray::Array: The array\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.synch_controller_to_responder-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.synch_controller_to_responder","text":"synch_controller_to_responder(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the controller to the responder\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.synch_responder_to_controller-Tuple{MPI.Comm, Any, Any, Any}","page":"Solver","title":"PeriLab.Solver.Verlet.synch_responder_to_controller","text":"synch_responder_to_controller(comm::MPI.Comm, overlapnodes, vector, dof)\n\nSynch the responder to the controller\n\nArguments\n\ncomm::MPI.Comm: The MPI communicator\noverlapnodes::Dict: The overlap nodes\nvector::Vector: The vector\ndof::Int: The degree of freedom\n\nReturns\n\nvector::Vector: The vector\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Verlet.test_timestep-Tuple{Float64, Float64}","page":"Solver","title":"PeriLab.Solver.Verlet.test_timestep","text":"test_timestep(t::Float64, critical_time_step::Float64)\n\nCompare a time step t with a critical time step critical_time_step and update critical_time_step if t is smaller.\n\nArguments\n\nt::Float64: The time step to compare with critical_time_step.\ncritical_time_step::Float64: The current critical time step.\n\nReturns\n\ncritical_time_step::Float64: The updated critical time step, which is either the original critical_time_step or t, whichever is smaller.\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#Boundary_conditions","page":"Solver","title":"Boundary_conditions","text":"","category":"section"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"Modules = [Solver.Boundary_conditions]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.apply_bc_dirichlet-Tuple{Dict, Module, Float64}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.apply_bc_dirichlet","text":"apply_bc_dirichlet(bcs::Dict, datamanager::Module, time::Float64)\n\nApply the boundary conditions\n\nArguments\n\nbcs::Dict{Any,Any}: The boundary conditions\ndatamanager::Module: Datamanager\ntime::Float64: The current time\n\nReturns\n\ndatamanager::Module: Datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.apply_bc_dirichlet_force-Tuple{Dict, Module, Float64}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.apply_bc_dirichlet_force","text":"applybcdirichlet_force(bcs::Dict, datamanager::Module, time::Float64)\n\nApply the boundary conditions\n\nArguments\n\nbcs::Dict{Any,Any}: The boundary conditions\ndatamanager::Module: Datamanager\ntime::Float64: The current time\n\nReturns\n\ndatamanager::Module: Datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.apply_bc_neumann-Tuple{Dict, Module, Float64}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.apply_bc_neumann","text":"apply_bc_neumann(bcs::Dict, datamanager::Module, time::Float64)\n\nApply the boundary conditions\n\nArguments\n\nbcs::Dict{Any,Any}: The boundary conditions\ndatamanager::Module: Datamanager\ntime::Float64: The current time\n\nReturns\n\ndatamanager::Module: Datamanager\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.boundary_condition-Tuple{Dict, Any}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.boundary_condition","text":"boundary_condition(params::Dict, datamanager)\n\nInitialize the boundary condition\n\nArguments\n\nparams::Dict: The parameters\ndatamanager::Module: Datamanager\n\nReturns\n\nbcs_out::Dict{Any,Any}: The boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.check_valid_bcs-Tuple{Dict{String, Any}, Module}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.check_valid_bcs","text":"check_valid_bcs(bcs::Dict{String,Any}, datamanager::Module\n\nCheck if the boundary conditions are valid\n\nArguments\n\nbcs::Dict{String,Any}: The boundary conditions\ndatamanager::Module: The data manager module\n\nReturns\n\nworking_bcs::Dict{String,Any}: The valid boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.clean_up-Tuple{String}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.clean_up","text":"clean_up(bc::String)\n\nClean up the boundary condition\n\nArguments\n\nbc::String: The boundary condition\n\nReturns\n\nbc::String: The cleaned up boundary condition\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.eval_bc!","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.eval_bc!","text":"eval_bc!(field_values::Union{Vector{Float64},Vector{Int64}}, bc::Union{Float64,Float64,Int64,String}, coordinates::Matrix{Float64}, time::Float64, dof::Int64)\n\nWorking with if-statements \"if t>2 0 else 20 end\" works for scalars. If you want to evaluate a vector, please use the Julia notation as input \"ifelse.(x .> y, 10, 20)\"\n\n\n\n\n\n","category":"function"},{"location":"lib/solver_functions/#PeriLab.Solver.Boundary_conditions.init_BCs-Tuple{Dict, Any}","page":"Solver","title":"PeriLab.Solver.Boundary_conditions.init_BCs","text":"init_BCs(params::Dict, datamanager)\n\nInitialize the boundary conditions\n\nArguments\n\nparams::Dict: The parameters\ndatamanager::Module: Datamanager\n\nReturns\n\nbcs::Dict{Any,Any}: The boundary conditions\n\n\n\n\n\n","category":"method"},{"location":"lib/solver_functions/","page":"Solver","title":"Solver","text":"","category":"page"},{"location":"man/input_yaml/#PeriLab-Configuration-File","page":"Input File","title":"PeriLab Configuration File","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"The PeriLab configuration file is a YAML file used to specify the parameters for running simulations in the PeriLab software. This structure represents the global configuration for PeriLab.","category":"page"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"The information is stored in the params dictionary","category":"page"},{"location":"man/input_yaml/#PeriLab","page":"Input File","title":"PeriLab","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Blocks: List of block configurations.\nblock_id: Block-specific parameters.\nDensity: Numeric value representing density. (Float64 or Int64)\nHorizon: Numeric value representing horizon. (Float64 or Int64)\nSpecific Heat Capacity: Numeric value representing specific heat capacity. (Float64 or Int64, optional)\nMaterial Model: String representing the material model. (optional)\nDamage Model: String representing the damage model. (optional)\nThermal Model: String representing the thermal model. (optional)\nAdditive Model: String representing the additive model. (optional)","category":"page"},{"location":"man/input_yaml/#FEM-(optional)","page":"Input File","title":"FEM (optional)","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Element Type: String representing the type of finite element.\nDegree: Numeric value representing the degree. (String or Int64)\nMaterial Model: String representing the material model.","category":"page"},{"location":"man/input_yaml/#Boundary-Conditions-(optional)","page":"Input File","title":"Boundary Conditions (optional)","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Own_Name: List of boundary condition configurations.\nCoordinate: String representing the coordinate.\nNode Set: String representing the node set.\nVariable: String representing the variable.\nType: String representing the type of boundary condition.\nValue: Numeric value, string, or a combination representing the boundary condition value. (Float64, Int64, String)","category":"page"},{"location":"man/input_yaml/#Compute-Class-Parameters-(optional)","page":"Input File","title":"Compute Class Parameters (optional)","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Own_Name: List of compute class parameters.\nBlock: String representing the block.\nNode Set: String representing the node set.\nCalculation Type: String representing the calculation type.\nCompute Class: String representing the compute class.\nVariable: String representing the variable.","category":"page"},{"location":"man/input_yaml/#Discretization","page":"Input File","title":"Discretization","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Input Mesh File: String representing the input mesh file.\nInput External Topology: External topology parameters. (optional)\nFile: String representing the external topology file.\nAdd Neighbor Search: Boolean indicating whether to add neighbor search. (optional)\nNode Sets: Dictionary of node sets. (optional)\nOwn_Name: Numeric value or string representing the node set. (Int64 or String)\nType: String representing the type of discretization.\nDistribution Type: String representing the distribution type. (optional)\nBond Filters: List of bond filter configurations. (optional)\nOwn_Name: Bond filter parameters.\nType: String representing the bond filter type.\nNormal X/Y/Z: Numeric values representing normal components. (Float64 or Int64)\nLower Left Corner X/Y/Z: Numeric values representing lower-left corner components. (Float64 or Int64)\nBottom Unit Vector X/Y/Z: Numeric values representing bottom unit vector components. (Float64 or Int64)\nCenter X/Y/Z: Numeric values representing center components. (Float64 or Int64)\nRadius: Numeric value representing the radius. (Float64 or Int64)\nBottom Length: Numeric value representing the bottom length. (Float64 or Int64)\nSide Length: Numeric value representing the side length. (Float64 or Int64)\nAllow Contact: Boolean indicating whether to allow contact. (optional)","category":"page"},{"location":"man/input_yaml/#Outputs-(optional)","page":"Input File","title":"Outputs (optional)","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Own_Name: List of output configurations.\nFlush File: Boolean indicating whether to flush the output file. (optional)\nOutput Frequency: Integer representing the output frequency.\nNumber of Output Steps: Integer representing the number of output steps.\nOutput File Type: String representing the output file type. (optional)\nOutput Filename: String representing the output filename.\nWrite After Damage: Boolean indicating whether to write after damage. (optional)\nOutput Variables: Dictionary of output variables.\nOwn_Name: Boolean indicating whether to output the variable.","category":"page"},{"location":"man/input_yaml/#Models-(optional)","page":"Input File","title":"Models (optional)","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Damage Models: Dictionary of damage models. (optional)\nOwn_Name: List of damage model configurations.\nCritical Value: Numeric value representing the critical value. (Float64 or Int64)\nDamage Model: String representing the damage model.\nInterblock Damage: Dictionary of interblock damage parameters.\nOwn_Name: Numeric value representing interblock damage. (Float64 or Int64, required)\nAnisotropic Damage: Dictionary of anisotropic damage parameters.\nCritical Value X/Y: Numeric values representing critical values in X and Y directions. (Float64 or Int64, required)\nMaterial Models: Dictionary of material models. (optional)\nOwn_Name: List of material model configurations.\nMaterial Model: String representing the material model.\nSymmetry: String representing the symmetry. (optional)\nPoisson's Ratio/Young's Modulus/Bulk Modulus/Shear Modulus: Numeric values representing material properties. (Float64 or Int64, optional)\nYield Stress: Numeric value representing the yield stress. (Float64 or Int64, optional)\nZero Energy Control: String representing zero energy control. (optional)\nC11/C12/.../C66: Numeric values representing material constants. (Float64 or Int64, optional)\nThermal Models: Dictionary of thermal models. (optional)\nOwn_Name: List of thermal model configurations.\nThermal Model: String representing the thermal model.\nType: String representing the type of thermal model. (optional)\nHeat Transfer Coefficient/Environmental Temperature/Thermal Conductivity/Thermal Expansion Coefficient/Thermal Conductivity Print Bed/Print Bed Temperature: Numeric values representing thermal parameters. (Float64 or Int64, optional)\nAdditive Models: Dictionary of additive models. (optional)\nOwn_Name: List of additive model configurations.\nAdditive Model: String representing the additive model.\nPrint Temperature: Numeric value representing the print temperature. (Float64 or Int64, optional)\nPre Calculation: Dictionary of pre-calculation parameters.\nBond Associated Deformation Gradient/Deformation Gradient/Deformed Bond Geometry/Shape Tensor: Boolean values indicating whether to calculate the respective parameter. (optional)","category":"page"},{"location":"man/input_yaml/#Solver","page":"Input File","title":"Solver","text":"","category":"section"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"Solve For Displacement/Material Models/Damage Models/Thermal Models/Additive Models: Boolean values indicating whether to solve for the respective components. (optional)\nMaximum Damage: Numeric value representing the maximum damage. (Float64, optional)\nFinal Time/Initial Time: Numeric values representing the final and initial time. (Float64 or Int64, required)\nNumerical Damping: Numeric value representing numerical damping. (Float64 or Int64, optional)\nVerlet: Dictionary of Verlet solver parameters.\nSafety Factor/Fixed dt/Number of Steps: Numeric values representing Verlet solver parameters. (Float64 or Int64, optional)\nExternal: Dictionary of external solver parameters.\nNumber of Steps: Numeric value representing the number of steps. (Int64, optional)","category":"page"},{"location":"man/input_yaml/","page":"Input File","title":"Input File","text":"","category":"page"},{"location":"lib/helper_functions/#Helper-Functions","page":"Helper","title":"Helper - Functions","text":"","category":"section"},{"location":"lib/helper_functions/#Index","page":"Helper","title":"Index","text":"","category":"section"},{"location":"lib/helper_functions/","page":"Helper","title":"Helper","text":"Pages = [\"helper_functions.md\"]","category":"page"},{"location":"lib/helper_functions/","page":"Helper","title":"Helper","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/helper_functions/#Helpers","page":"Helper","title":"Helpers","text":"","category":"section"},{"location":"lib/helper_functions/","page":"Helper","title":"Helper","text":"Modules = [Solver.Helpers]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.check_inf_or_nan-Tuple{Any, Any}","page":"Helper","title":"PeriLab.Solver.Helpers.check_inf_or_nan","text":"check_inf_or_nan(array, msg)\n\nChecks if the sum of the array is finite. If not, an error is raised.\n\nArguments\n\narray: The array to check.\nmsg: The error message to raise.\n\nReturns\n\nBool: true if the sum of the array is finite, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.find_files_with_ending-Tuple{AbstractString, AbstractString}","page":"Helper","title":"PeriLab.Solver.Helpers.find_files_with_ending","text":"find_files_with_ending(folder_path::AbstractString, file_ending::AbstractString)\n\nReturns a list of files in folder_path that end with file_ending.\n\nArguments\n\nfolder_path::AbstractString: The path to the folder.\nfile_ending::AbstractString: The ending of the files.\n\nReturns\n\nfile_list::Vector{String}: The list of files that end with file_ending.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.find_indices-Tuple{Any, Any}","page":"Helper","title":"PeriLab.Solver.Helpers.find_indices","text":"find_indices(vector, what)\n\nReturns the indices of vector that are equal to what.\n\nArguments\n\nvector::Vector: The vector to search in.\nwhat: The value to search for.\n\nReturns\n\nindices::Vector: The indices of vector that are equal to what.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.find_inverse_bond_id-Tuple{Vector{Vector{Int64}}}","page":"Helper","title":"PeriLab.Solver.Helpers.find_inverse_bond_id","text":"find_inverse_bond_id(nlist::Vector{Vector{Int64}})\n\nFinds the inverse of the bond id in the nlist.\n\nArguments\n\nnlist::Vector{Vector{Int64}}: The nlist to find the inverse of.\n\nReturns\n\ninverse_nlist::Vector{Dict{Int64,Int64}}: The inverse nlist.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.get_active_update_nodes-NTuple{4, Any}","page":"Helper","title":"PeriLab.Solver.Helpers.get_active_update_nodes","text":"get_active_update_nodes(active::Vector{Bool}, update_list::Vector{Bool}, nodes::Vector{Int64}, index::Vector{Int64})\n\nReturns the active nodes and the update nodes.\n\nArguments\n\nactive::Vector{Bool}: The active vector.\nupdate_list::Vector{Bool}: The update vector.\nnodes::Vector{Int64}: The vector of nodes.\nindex::Vector{Int64}: Pre allocated Vector.\n\nReturns\n\nupdate_nodes::Vector{Int64}: The nodes of update that are true.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.get_fourth_order-Tuple{Any, Int64}","page":"Helper","title":"PeriLab.Solver.Helpers.get_fourth_order","text":"get_fourth_order(CVoigt, dof)\n\nConstructs a symmetric fourth-order tensor from a Voigt notation vector. It uses Tensors.jl package.\n\nThis function takes a Voigt notation vector CVoigt and the degree of freedom dof to create a symmetric fourth-order tensor. The CVoigt vector contains components that represent the tensor in Voigt notation, and dof specifies the dimension of the tensor.\n\nArguments\n\nCVoigt::Matrix{Float64}: A vector containing components of the tensor in Voigt notation.\ndof::Int64: The dimension of the resulting symmetric fourth-order tensor.\n\nReturns\n\nSymmetricFourthOrderTensor{dof}: A symmetric fourth-order tensor of dimension dof.\n\nExample\n\n```julia CVoigt = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] dof = 3 result = getfourthorder(CVoigt, dof)\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.invert","page":"Helper","title":"PeriLab.Solver.Helpers.invert","text":"invert(A::Union{Matrix{Float64},Matrix{Int64}}, error_message::String=\"Matrix is singular\")\n\nInvert a n x n matrix. Throws an error if A is singular.\n\nArguments\n\nA::Union{Matrix{Float64},Matrix{Int64}}: A n x n matrix.\nerror_message::String=\"Matrix is singular\": The error message returned if A is singular.\n\nReturns\n\ninverted matrix or nothing if not inverable.\n\n\n\n\n\n","category":"function"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.matrix_style-Tuple{Any}","page":"Helper","title":"PeriLab.Solver.Helpers.matrix_style","text":"matrix_style(A)\n\nInclude a scalar or an array and reshape it to style needed for LinearAlgebra package\n\nArguments\n\nA: The array or scalar to reshape\n\nReturns\n\nArray: The reshaped array\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.progress_bar-Tuple{Int64, Int64, Bool}","page":"Helper","title":"PeriLab.Solver.Helpers.progress_bar","text":"progress_bar(rank::Int64, nsteps::Int64, silent::Bool)\n\nCreate a progress bar if the rank is 0. The progress bar ranges from 1 to nsteps + 1.\n\nArguments\n\nrank::Int64: An integer to determine if the progress bar should be created.\nnsteps::Int64: The total number of steps in the progress bar.\nsilent::Bool: de/activates the progress bar\n\nReturns\n\nProgressBar or UnitRange: If rank is 0, a ProgressBar object is returned. Otherwise, a range from 1 to nsteps + 1 is returned.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.qdim-Tuple{Int64, Int64}","page":"Helper","title":"PeriLab.Solver.Helpers.qdim","text":"qdim(order::Int64, dof::Int64)\n\nCalculate the number of terms in a polynomial expansion up to a specified accuracy order. Simplied first complex loop in Peridigm correspondence::computeLagrangianGradientWeights. In the unit test this values where tested.\n\nArguments\n\norder::Int64: The accuracy order of the polynomial expansion.\n\nReturns\n\nInt64: The total number of terms in the polynomial expansion.\n\nDescription\n\nThis function calculates the number of terms in a polynomial expansion up to the specified accuracy order using an analytical formula derived from combinatorial considerations. The function iterates over each order from 1 to the specified order and calculates the sum of binomial coefficients according to the formula: qdim(order) = Σ(i=1 to order) [(i+2)! / (2! * i!)]\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.rotate-Tuple{Union{SubArray, Vector{Int64}}, Union{Array{Float64, 3}, SubArray}, Union{Array{Float64, 3}, SubArray}, Bool}","page":"Helper","title":"PeriLab.Solver.Helpers.rotate","text":"rotate(nodes::Union{SubArray,Vector{Int64}}, dof::Int64, matrix::Union{SubArray,Array{Float64,3}}, angles::SubArray, back::Bool)\n\nRotates the matrix.\n\nArguments\n\nnodes::Union{SubArray,Vector{Int64}}: List of block nodes.\nmatrix::Union{SubArray,Array{Float64,3}}: Matrix.\nrot::SubArray: Rotation tensor.\nback::Bool: Back.\n\nReturns\n\nmatrix::SubArray: Matrix.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/#PeriLab.Solver.Helpers.rotate_second_order_tensor-Tuple{Matrix{Float64}, Matrix{Float64}, Bool}","page":"Helper","title":"PeriLab.Solver.Helpers.rotate_second_order_tensor","text":"rotate_second_order_tensor(angles::Union{Vector{Float64},Vector{Int64}}, tensor::Matrix{Float64}, dof::Int64, back::Bool)\n\nRotates the second order tensor.\n\nArguments\n\nangles::Union{Vector{Float64},Vector{Int64}}: Angles.\ntensor::Matrix{Float64}: Second order tensor.\ndof::Int64: Degree of freedom.\nback::Bool: Back.\n\nReturns\n\ntensor::Matrix{Float64}: Second order tensor.\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_functions/","page":"Helper","title":"Helper","text":"","category":"page"},{"location":"theory/theory_ordinary/#Ordinary-state-based-Peridynamics","page":"Ordinary state-based","title":"Ordinary state-based Peridynamics","text":"","category":"section"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"info: Info\nMore details can be found here [3]","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"For an isotropic Peridynamic solid and small deformations we can define underlinex=underlinemathbfX and  underliney=underlinemathbfY and  underlinee=underliney-underlinex=boldsymboleta","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"underliney-underlinexneqboldsymboletafor the general case","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"The force density scalar state can be defined as underlinet=underlinemathbfT","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"The weighted volume is","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"m_V = int_mathcalH underlineomegalangle boldsymbolxirangle underlinex underlinex dV","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"The dilatation is given as","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"theta = frac3m_V = int_mathcalHunderlineomegalangle boldsymbolxirangle underlinex underlineelangle boldsymbolxirangle dV","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"underlinet = fracomegalangle boldsymbolxirangle m_vleft3K theta underlinex + 15G underlinee^d  right","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"with the decomposition in the devatoring and isotropic part of the strain","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"underlinee^dlangle boldsymbolxirangle = epsilon_ij^dxi_ifracx_jboldsymbolxi","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"and","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"underlinee^ilangle boldsymbolxirangle = epsilon_ij^ixi_ifracx_jboldsymbolxi","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"The force density can be determined as","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"underlinemathbfT=underlinetfracunderlinemathbfYunderlinemathbfY","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"For plane stress and plane strain the equations are taken form [1].","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"TODO","category":"page"},{"location":"theory/theory_ordinary/","page":"Ordinary state-based","title":"Ordinary state-based","text":"","category":"page"},{"location":"man/models/damage/#Damage-Models","page":"Damage Models","title":"Damage Models","text":"","category":"section"},{"location":"man/models/damage/","page":"Damage Models","title":"Damage Models","text":"Damage Model Critical Stretch Critical Energy\nCritical Value ✔️ ✔️\nInterblock Damage (✔️) (✔️)\nAnisotropic Damage (✔️) (✔️)","category":"page"},{"location":"man/models/damage/#Critical-Stretch","page":"Damage Models","title":"Critical Stretch","text":"","category":"section"},{"location":"man/models/damage/","page":"Damage Models","title":"Damage Models","text":"The critical value correspondends to the critical stretch for this model, defined in the theory manual.","category":"page"},{"location":"man/models/damage/#Critical-Energy","page":"Damage Models","title":"Critical Energy","text":"","category":"section"},{"location":"man/models/damage/","page":"Damage Models","title":"Damage Models","text":"","category":"page"},{"location":"lib/references/","page":"References","title":"References","text":"F. Bobaru, J. T. Foster, P. H. Geubelle and S. A. Silling. Handbook of Peridynamic Modeling. Advances in Applied Mathematics (CRC Press, 2016).\n\n\n\nD. J. Littlewood, M. L. Parks, J. T. Foster, J. A. Mitchell and P. Diehl. The Peridigm Meshfree Peridynamics Code. Journal of Peridynamics and Nonlocal Modeling (2023).\n\n\n\nC. Willberg, L. Wiedemann and M. Rädel. A mode-dependent energy-based damage model for peridynamics and its implementation. Journal of Mechanics of Materials and Structures 14, 193–217 (2019).\n\n\n\nC. Willberg, J.-T. Hesse, M. Garbade, M. Rädel, F. Heinecke, A. Schuster and A. Pernatii. A user material interface for the Peridynamic Peridigm framework. SoftwareX 21, 101322 (2023).\n\n\n\nJ.-T. Hesse, C. Willberg, R. Hein and F. Winkelmann. Peridynamic framework to model additive manufacturing processes. PAMM n/a, e202300033 (2023), arXiv:https://onlinelibrary.wiley.com/doi/pdf/10.1002/pamm.202300033.\n\n\n\nC. Willberg, J.-T. Hesse and A. Pernatii. PeriLab. SoftwareX (2024).\n\n\n\nS. Oterkus, E. Madenci and A. Agwai. Peridynamic thermal diffusion. Journal of Computational Models 265, 71–96 (2014).\n\n\n\nJ. Trageser and P. Seleson. Bond-Based Peridynamics: a Tale of Two Poisson's Ratios. Journal of Peridynamics and Nonlocal Modeling 2, 278–288 (2020).\n\n\n\nS. A. Silling, M. Epton, O. Weckner, J. Xu and E. Askari. Peridynamic States and Constitutive Modeling. Journal of Elasticity 88, 151–184 (2007).\n\n\n\nD. J. Littlewood, J. D. Thomas and T. Shelton. Estimation of the Critical Time Step for Peridynamic Models. In: Proceedings of the 12th U.S. National Congress on Computational Mechanics (2013).\n\n\n\nS. Oterkus, E. Madenci and A. Agwai. Fully coupled peridynamic thermomechanics. Journal of the Mechanics and Models of Solids 64, 1–23 (2014).\n\n\n\nE. Madenci and E. Oterkus. Peridynamic Theory and Its Applications (Springer New York, 2014).\n\n\n\n","category":"page"},{"location":"lib/references/","page":"References","title":"References","text":"","category":"page"},{"location":"lib/logging_functions/#Logging-Functions","page":"Logging","title":"Logging - Functions","text":"","category":"section"},{"location":"lib/logging_functions/#Index","page":"Logging","title":"Index","text":"","category":"section"},{"location":"lib/logging_functions/","page":"Logging","title":"Logging","text":"Pages = [\"logging_functions.md\"]","category":"page"},{"location":"lib/logging_functions/","page":"Logging","title":"Logging","text":"CurrentModule = PeriLab","category":"page"},{"location":"lib/logging_functions/#Logging_module","page":"Logging","title":"Logging_module","text":"","category":"section"},{"location":"lib/logging_functions/","page":"Logging","title":"Logging","text":"Modules = [Logging_module]\nOrder   = [:function, :type]","category":"page"},{"location":"lib/logging_functions/#PeriLab.Logging_module.get_log_file-Tuple{}","page":"Logging","title":"PeriLab.Logging_module.get_log_file","text":"get_log_file()\n\nGet the log file.\n\nReturns\n\nlog_file::String: The log file.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/#PeriLab.Logging_module.init_logging-Tuple{String, Bool, Bool, Int64, Int64}","page":"Logging","title":"PeriLab.Logging_module.init_logging","text":"init_logging(filename::String, debug::Bool, silent::Bool, rank::Int64, size::Int64)\n\nInitialize the logging.\n\nArguments\n\nfilename::String: The filename.\ndebug::Bool: If debug is true.\nsilent::Bool: If silent is true.\nrank::Int64: The rank.\nsize::Int64: The size.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/#PeriLab.Logging_module.print_table-Tuple{Matrix, Module}","page":"Logging","title":"PeriLab.Logging_module.print_table","text":"print_table(data::Matrix, datamanager::Module)\n\nPrint the table.\n\nArguments\n\ndata::Matrix: The data.\ndatamanager::Module: The data manager.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/#PeriLab.Logging_module.progress_filter-Tuple{Any}","page":"Logging","title":"PeriLab.Logging_module.progress_filter","text":"progress_filter(log_args)\n\nFilter progress messages.\n\nArguments\n\nlog_args: The log arguments.\n\nReturns\n\ntrue: If the message is not a progress message.\nfalse: If the message is a progress message.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/#PeriLab.Logging_module.set_log_file-Tuple{String, Bool, Int64, Int64}","page":"Logging","title":"PeriLab.Logging_module.set_log_file","text":"set_log_file(filename::String)\n\nSet the log file.\n\nArguments\n\nfilename::String: The filename.\n\nReturns\n\nlog_file::String: The log file.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/#PeriLab.Logging_module.set_result_files-Tuple{Vector{Dict}}","page":"Logging","title":"PeriLab.Logging_module.set_result_files","text":"set_result_files(result_files_temp::Vector{Dict})\n\nSet the result files.\n\nArguments\n\nresult_files_temp::Vector{Dict}: The result files.\n\n\n\n\n\n","category":"method"},{"location":"lib/logging_functions/","page":"Logging","title":"Logging","text":"","category":"page"},{"location":"man/mesh_input/#Mesh-Input-File-Structure","page":"Mesh and Nodesets","title":"Mesh Input File Structure","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The mesh input file is a text file used to define the geometry of the simulation domain. The file has a header and subsequent lines representing individual nodes with their corresponding coordinates, block IDs, volumes, and optional user-defined values. Below is an example of the structure:","category":"page"},{"location":"man/mesh_input/#Header","page":"Mesh and Nodesets","title":"Header","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The header of the mesh input file specifies the format of the subsequent data columns. In this example, the header consists of the following columns:","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Variable definition","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Parameter Datamanager name Header name 2D Header name 3D Type\nx, y, z (optional) coordinate of the node Coordinates x, y x, y, z Float64, Int64\nDefinition to which block the node corresponds. Is needed in the Yaml file to define properties Block_Id block_id block_id Int64\nVolume the node represents. Volume volume volume Float64, Int64","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Optional","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Parameter Datamanager name Header name 2D Header name 3D Type\nOrientation of a Node Angles Angles Anglesx, Anglesy, Anglesz Float64, Int64\nActivation time of a node, e.g. used for additive manufacturing to define when the node will be acativated Activation_Time Activation_Time Activation_Time Float64, Int64\nStatus of the node. If it is false the node is deactivated, but exists. This variable is automatically created if additive models are used and set everywhere to false, if it is not predefined Active Active Active Bool","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The difference between 2D and 3D is found automatically. If no z occurs PeriLab identifies it as 2D problem and requests a plane stress or plane strain definition.","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"tip: Additional parameter\nAdditional parameter can be applied in the header. They will be added in the datamanager and can be used in the programm. If you add x,y,z to the parameter a multidimensional field will be created, e.g. MyVarx, MyVary will be created as field MyVar with 2 degrees of freedom","category":"page"},{"location":"man/mesh_input/#Data-Lines","page":"Mesh and Nodesets","title":"Data Lines","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The data lines represent individual nodes in the mesh, with values corresponding to the columns specified in the header.","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Example Data Lines:","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"header: x y block_id volume\n0.0 0.0 1 1.0E-02\n0.1 0.0 1 1.0E-02\n0.1 0.1 1 1.0E-02\n...","category":"page"},{"location":"man/mesh_input/#Abaqus-Input","page":"Mesh and Nodesets","title":"Abaqus Input","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"You can use the Abaqus input file to define the geometry of the simulation domain. In order to do that, refer in the input deck to your .inp file:","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"PeriLab:\n  Discretization:\n    Input Mesh File: ABAQUS_FILE.inp\n    Type: Abaqus\n...","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"All elements that are defined in a element set in the Abaqus input file will be translated to PeriLab nodes. The center and volume of the elements will be calculated automatically. Have a look at the AbaqusReader.jl package to see what elements are supported.","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"warning: Supported elements\nCurrently only Quad4, Tet4, Wedge6 and Hex8 elements are tested!","category":"page"},{"location":"man/mesh_input/#How-to-define-blocks-and-nodesets-with-Abaqus?","page":"Mesh and Nodesets","title":"How to define blocks and nodesets with Abaqus?","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The element sets are defined in the Abaqus input file and can be used to define blocks and nodesets. The order of the blocks will be similar to the order in the .inp file. Nodesets can be referenced via the correspoinding element set in the Abaqus input file.","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"tip: Block order\nIf you are not sure what order the blocks in the .inp file will be read in, you can use PeriLab to create an exodus file and check the order of the blocks in ParaView.","category":"page"},{"location":"man/mesh_input/#Nodeset-Input-File-Structure","page":"Mesh and Nodesets","title":"Nodeset Input File Structure","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The nodeset input file is a text file used to define sets of nodes in the simulation domain. The file has a header and subsequent lines representing individual node global IDs that belong to the nodeset. Below is an example of the structure:","category":"page"},{"location":"man/mesh_input/#Header-2","page":"Mesh and Nodesets","title":"Header","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The header of the nodeset input file specifies the format of the subsequent data columns. In this example, the header consists of the following column:","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"global_id: Global ID of the node.","category":"page"},{"location":"man/mesh_input/#Data-Lines-2","page":"Mesh and Nodesets","title":"Data Lines","text":"","category":"section"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"The data lines represent individual nodes in the nodeset, with values corresponding to the columns specified in the header.","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"Example Data Lines:","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"header: global_id\n1\n2\n11\n12","category":"page"},{"location":"man/mesh_input/","page":"Mesh and Nodesets","title":"Mesh and Nodesets","text":"","category":"page"},{"location":"man/models/thermal/#Thermal-Models","page":"Thermal Models","title":"Thermal Models","text":"","category":"section"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"The list shows the three main model, thermal expansion, thermal flow and heat transfer. All can use simular parameters to work.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Thermal Model Thermal Expansion Thermal Flow Heat Transfer\nType ✔️ ✔️ ✔️\nHeat Transfer Coefficient ✔️ ✔️ ✔️\nEnvironmental Temperature ✔️ ✔️ ✔️\nThermal Conductivity   ✔️\nThermal Expansion Coefficient ✔️  \nThermal Conductivity Print Bed   ✔️\nPrint Bed Temperature   ✔️","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"There are block defined properties for needed for the thermal models.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Parameter Unit Description\nSpecific Heat Capacity leftfracJkgKright Specific heat capacity of the block\nDensity leftfrackgm^3right Specific heat capacity of the block\nHorizon m Radius of the neighborhood","category":"page"},{"location":"man/models/thermal/#Thermal-Expansion","page":"Thermal Models","title":"Thermal Expansion","text":"","category":"section"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Calculates the thermal expansion of the material.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Parameter Unit Description\nThermal Expansion Coefficient left1Kright Thermal expansion can be a 3times3 matrix.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"info: Thermal expansion\nPeriLab supports currently only isotropic thermal expansion.","category":"page"},{"location":"man/models/thermal/#Thermal-Flow","page":"Thermal Models","title":"Thermal Flow","text":"","category":"section"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Parameter Unit Description\nThermal Conductivity leftfracWmKright ","category":"page"},{"location":"man/models/thermal/#Heat-Transfer","page":"Thermal Models","title":"Heat Transfer","text":"","category":"section"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"Parameter Unit Description\nHeat Transfer Coefficient leftfracWm^2Kright Coefficient describing the heat transfer between a solid and a gas or liquid","category":"page"},{"location":"man/models/thermal/#Model-merging","page":"Thermal Models","title":"Model merging","text":"","category":"section"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"In PeriLab you are able to combine models with each other, by simply adding a +. Therefore, modules can be merged and double coding can be avoided. This is necessary if you want to model the heating of a model and its expansion.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"tip: Full Model\nIf you want to run a full thermal model Thermal Flow + Heat Transfer + Thermal Expansion.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"tip: Model order\nThe order is defined by the user. Therfore, in this example first the flow, than the transfer to the environment and than the expansion will be calculated.","category":"page"},{"location":"man/models/thermal/","page":"Thermal Models","title":"Thermal Models","text":"","category":"page"},{"location":"man/dev/module_integration/#Module-integration","page":"Module integration","title":"Module integration","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"If you want to integrate your own model check if it suits in one of the predefined classes material, damage, additive, thermal or corrosion. If so check the template folder.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"info: Material Template\nMaterials have multiple templates, because the correspondence formulation allows additional options.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"Each template has a init function, a name function, a compute function.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"Copy the template and put it in the folder. Change all the functions and give the module a name.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"info: Automatic Integration\nIn PeriLab makros are used to automatically integrate your model.","category":"page"},{"location":"man/dev/module_integration/#Parameter","page":"Module integration","title":"Parameter","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"In PeriLab a field called params exists. This field provides all the material information. The structure is given here","category":"page"},{"location":"man/dev/module_integration/#Init-function","page":"Module integration","title":"Init function","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"The init function is used to read and check the  properties provided by the yaml. It should be done there, because if the compute function is used, this check is done in every time step. Also specific fields can be defined here as well.","category":"page"},{"location":"man/dev/module_integration/#Name-function","page":"Module integration","title":"Name function","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"This function defines the name of the module. This name is used to call this model from the yaml.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"info: Correspondence\nIf you want to integrate a correspondence model, make sure ''Correspodence'' occur in the material name","category":"page"},{"location":"man/dev/module_integration/#Compute-function","page":"Module integration","title":"Compute function","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"This function is called from the solver. You can call whatever function you like from here. However, this function should evaluate the result needed for the solving process, e.g. heat flux or force densities.","category":"page"},{"location":"man/dev/module_integration/#Module-name","page":"Module integration","title":"Module name","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"You can setup the module name as you like as long as it does not exist a second time in PeriLab.","category":"page"},{"location":"man/dev/module_integration/#Creating-your-own-model-category","page":"Module integration","title":"Creating your own model category","text":"","category":"section"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"warn: Creating your own model category\nThis is advanced programming. Feel free to contact the developers for help.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"To integrate a model category somewhere you have to do the following things. You need a main function of your modeling category. The existing ones are the factory files. These modules have a init function and a compute function. The init function find the modules of the category and the compute function calls these modules during the solving process.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"Here, the call for the init function is shown for the material factory.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"mod = Set_modules.create_module_specifics(material_model, module_list, \"material_name\")\ndatamanager.set_model_module(material_model, mod)","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"The module_list is optained, by applying","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"global module_list = Set_modules.find_module_files(@__DIR__, \"material_name\")\nSet_modules.include_files(module_list)","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"You can integrate these functions than in the compute function of the factory module.","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"mod = datamanager.get_model_module(material_model)\ndatamanager = mod.compute_model(datamanager, nodes, model_param, time, dt, to)","category":"page"},{"location":"man/dev/module_integration/","page":"Module integration","title":"Module integration","text":"","category":"page"},{"location":"man/output/#Output","page":"Output","title":"Output","text":"","category":"section"},{"location":"man/output/#Output-File-Type","page":"Output","title":"Output File Type","text":"","category":"section"},{"location":"man/output/","page":"Output","title":"Output","text":"Currently Exodus and CSV are supported as output types.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"warning: CSV File\nOnly variables that are defined as global variables are supported.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"tip: Flush File\nBy default the output files will be flushed after each write-step, meaning you can look at the results while the simulation is still running.","category":"page"},{"location":"man/output/#Output-Frequency-/-Number-of-Output-Steps","page":"Output","title":"Output Frequency / Number of Output Steps","text":"","category":"section"},{"location":"man/output/","page":"Output","title":"Output","text":"As the number of solver steps can be quite large and you don't want to buy new drives for every simulation we want to specify the number of output steps written.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"You can either specify the total number of output steps via Number of Output Steps or the frequency of output via Output Frequency.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"tip: First time users\nFor first time users we will recommend to use Number of Output Steps in the range of 100 to 1000. Depending on your discretization this is enough to get a good idea of the simulation results.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"tip: Only damage\nIf you want to take a closer look at damage initiation and propagation and are worried about the result file size, you can write another output file with Write After Damage set to true.","category":"page"},{"location":"man/output/#Output-Variables","page":"Output","title":"Output Variables","text":"","category":"section"},{"location":"man/output/","page":"Output","title":"Output","text":"Below you can find a list of all current Output Variables and the necessary Prerequisites.","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"Variable Prerequisite\nDensity -\nHorizon -\nNumber of Neighbors -\nNumber of Filtered Neighbors Bond-Filter\nUpdate List -\nActive -\nDisplacements -\nVelocity -\nAcceleration -\nForces -\nForce Densities -\nCauchy Stress -\nvon Mises Stress -\nOrientations Rotated Nodes\nDamage Damage Model\nWeighted Volume PD Solid Elastic\nDilatation PD Solid Elastic\nYield Value PD Solid Plastic\nLambda Plastic PD Solid Plastic\nStrain Correspondence\nZero Energy Stiffness Correspondence\nPlastic Strain Correspondence Plastic\nTemperature Thermal Models\nDelta Temperature Thermal Models\nHeat Flow Thermal Models\nSpecific Heat Capacity Thermal Models\nSpecific Volume Thermal Models\nSurface_Nodes Thermal Models\nConcentration Corrosion Models\nDelta Concentration Corrosion Models\nConcentration Flux Corrosion Models\nLumbed Mass Matrix FEA\nFE Nodes FEA","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"info: Own Variables\nAll variables that are defined as global variables are supported as well as those defined in the mesh input f.e.: Angles","category":"page"},{"location":"man/output/","page":"Output","title":"Output","text":"","category":"page"},{"location":"man/models/additive/#Additive-Models","page":"Additive Models","title":"Additive Models","text":"","category":"section"},{"location":"man/models/additive/","page":"Additive Models","title":"Additive Models","text":"Additive Model Simple\nPrint Temperature ✔️","category":"page"},{"location":"man/models/additive/#Simple","page":"Additive Models","title":"Simple","text":"","category":"section"},{"location":"man/models/additive/","page":"Additive Models","title":"Additive Models","text":"","category":"page"},{"location":"man/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The PeriLab package is available through the Julia package system and can be installed using the following commands:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"PeriLab\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Throughout the rest of this tutorial, we will assume that you have installed the PeriLab package and have already typed using PeriLab to bring all of the relevant variables into your current namespace.","category":"page"},{"location":"man/getting_started/#Using-PeriLab","page":"Getting Started","title":"Using PeriLab","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The simplest way to run the PeriLab simulation core is to use a provided example import the module and go. ","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"using PeriLab\n\nPeriLab.get_examples()\nPeriLab.main(\"examples/DCB/DCBmodel.yaml\")","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The output should look like this:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"<script src=\"https://asciinema.org/a/649032.js\" id=\"asciicast-649032\" async=\"true\"></script>","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The main functionalities for the yaml input deck is given in","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"\"examples/functionalities.yaml\"","category":"page"},{"location":"man/getting_started/#Using-PeriLab-with-multiple-processors-(MPI)","page":"Getting Started","title":"Using PeriLab with multiple processors (MPI)","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"In order to run PeriLab for large scale problems MPI needs to be installed:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"$ julia\njulia> using MPI\njulia> MPI.install_mpiexecjl()","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Run PeriLab with two processors:","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"$ mpiexecjl -n 2 julia -e \"using PeriLab; PeriLab.main()\" Dogbone.yaml -v","category":"page"},{"location":"man/getting_started/#Training","page":"Getting Started","title":"Training","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"The training input is given under the examples folder. The documentation and a video will follow.","category":"page"},{"location":"man/getting_started/#Index","page":"Getting Started","title":"Index","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"Pages = [\"gettin_started.md\"]","category":"page"},{"location":"man/getting_started/#Functions","page":"Getting Started","title":"Functions","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = PeriLab","category":"page"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"main\nget_examples","category":"page"},{"location":"man/getting_started/#PeriLab.main","page":"Getting Started","title":"PeriLab.main","text":"main()\n\nEntry point for the PeriLab application.\n\nThis function serves as the entry point for the PeriLab application. It calls the core main function with the provided arguments.\n\n\n\n\n\nmain(filename::String, output_dir::String=\"\", dry_run::Bool=false, verbose::Bool=false, debug::Bool=false, silent::Bool=false, reload::Bool=false)\n\nEntry point for the PeriLab application.\n\nThis function serves as the entry point for the PeriLab application. It calls the core main function with the provided arguments.\n\nArguments\n\nfilename::String: The filename of the input file.\noutput_dir::String: The output directory.\ndry_run::Bool=false: Whether to run in dry-run mode.\nverbose::Bool=false: Whether to run in verbose mode.\ndebug::Bool=false: Whether to run in debug mode.\nsilent::Bool=false: Whether to run in silent mode.\nreload::Bool=false: Whether to reload the input file.\n\n\n\n\n\n","category":"function"},{"location":"man/getting_started/#PeriLab.get_examples","page":"Getting Started","title":"PeriLab.get_examples","text":"get_examples()\n\nCopy the examples folder to the current directory.\n\n\n\n\n\n","category":"function"},{"location":"man/getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"man/models/materials/#Material-Models","page":"Material Models","title":"Material Models","text":"","category":"section"},{"location":"man/models/materials/#Existing-Models","page":"Material Models","title":"Existing Models","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The models related functions can be found here.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Method Related Model in PeriLab\nBond-based Bond-based Elastic\nOrdinary state-based PD Solid Elastic, PD Solid Plastic\nNon-ordinary state-based Correspondence Elastic, Correspondence Plastic, Correspondence UMAT","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Material Model Bond-based Elastic PD Solid Elastic PD Solid Plastic Correspondence Elastic Correspondence Plastic\nSymmetry ✔️ ✔️ ✔️ ✔️ ✔️\nPoisson's/Young's/Bulk/Shear ✔️ ✔️ ✔️ ✔️ ✔️\nYield Stress   ✔️  ✔️\nZero Energy Control    ✔️ ✔️\nC11/C12/.../C66 (✔️) (✔️) (✔️) (✔️) (✔️)","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nDensity leftfrackgm^3right Specific heat capacity of the block\nHorizon m Radius of the neighborhood","category":"page"},{"location":"man/models/materials/#Bond-based-Elastic","page":"Material Models","title":"Bond-based Elastic","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The Bond-based Elastic calculates the linear elastic behavior of a simple bond-based material. The theory of the bond-based elastic material can be found here.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nYoungs Modulus leftNm^2right Young's modulus or elasticity modulus\nShear Modulus leftNm^2right Shear modulus\nBulk Modulus leftNm^2right Bulk modulus or compression modulus","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"One of theses parameters have to be defined.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"info: Fixed Poisson's ratio\nIn the bond-based formulation the Poisson's ratio is fixed by 0.25 for 2D plane strain and 1/3 for 3D and 2D plane stress, respectively.","category":"page"},{"location":"man/models/materials/#PD-Solid-Elastic","page":"Material Models","title":"PD Solid Elastic","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The PD Solid Elastic module calculates the isotropic linear elastic material law for a peridynamic solid material. The underlying theory can be found here.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nYoungs Modulus leftNm^2right Young's modulus or elasticity modulus\nShear Modulus leftNm^2right Shear modulus\nBulk Modulus leftNm^2right Bulk modulus or compression modulus\nPoissons Ratio Modulus left-right Poisson's ratio","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Two of these parameters have to be defined. The other two are determined automatically and can be used in the model if needed.","category":"page"},{"location":"man/models/materials/#PD-Solid-Plastic","page":"Material Models","title":"PD Solid Plastic","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The PD Solid Plastic material uses elastic stresses and calculate the plastic part for a peridynamic solid material. Has to be combined with a function, which provides elastic stresses.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nYield Stress leftNm^2right Yield stress","category":"page"},{"location":"man/models/materials/#Correspondence-Elastic","page":"Material Models","title":"Correspondence Elastic","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The Correspondence Elastic module calculates the fully anisotropic linear elastic material law. The underlying correspondence theory can be found here.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nYoungs Modulus leftNm^2right Young's modulus or elasticity modulus\nShear Modulus leftNm^2right Shear modulus or elasticity modulus\nBulk Modulus leftNm^2right Bulk modulus or compression modulus\nPoissons Ratio Modulus left-right Poisson's ratio\nC11, C12, ..., C66 (optional) leftNm^2right Parameter of the Hook matrix","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"For Correspondence Elastic you can provide all 27 elastic parameters if you like by adding C11,...,C66.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"tip: Isotropic elastic parameter\nFor the time step calculation two of the four isotropic elastic parameter have to be defined.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"tip: Material Rotation\nIf you define a field \"Angles\" for 2D or \"Anglesx\", \"Anglesy\" and \"Anglesz\" for 3D in the mesh file your material will be rotated. This helps to create an arbitrary material orientation.","category":"page"},{"location":"man/models/materials/#Correspondence-Plastic","page":"Material Models","title":"Correspondence Plastic","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The Correspondence Plastic material uses elastic stresses and calculate the plastic part. Has to be combined with a function, which provides elastic stresses.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Unit Description\nYield Stress leftNm^2right Yield stress","category":"page"},{"location":"man/models/materials/#Correspondence-UMAT","page":"Material Models","title":"Correspondence UMAT","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"The Correspondence UMAT can be used to include Abaqus user materials.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"warning: Replace ABAQUS Functions\nNo extra Abaqus functions should be called in the user subroutine. For example INCLUDE 'ABA_PARAM.INC' needs to be replaced by implicit real(8) (a-h,o-z)","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"You can call the user subroutine by defining path with a compiled Fotran library. [4] gives an overview about the interface for Peridigm. In PeriLab all fields in the UMAT interface are supported execpt these integer (NOEL, NPT, LAYER, KSPT, JSTEP, KINC) and float values (PNEWDT, CELENT). In the material module these values defined for the interfase and named as notsupportedint and notsupportedfloat, respectively.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"Parameter Type and Range Description Optional\nFile String Path and filename of the UMAT, e.g. \"./src/Models/Material/UMATs/libusertest.so\" No\nNumber of State Variables Int geq 0 Number of state variables; Defines the size of state variable field datamanager.createconstantnodefield(\"State Variables\", Float64, numstate_vars) yes\nNumber of Properties Int geq 1 Properties of the material; Needed for the propterty field datamanager.createconstantfreesizefield(\"Properties\", Float64, (num_props, 1)) \n No  \nProperty_iID Float iID is 1...Number of Properties. It has to be in order and can be utilized in the UMAT. No\nUMAT Material Name String (maximum are 80 characters) Defines material names defined in the UMAT to destinguash between different areas of the Fortran routine Yes\nUMAT name in development Should allow the definition of own subroutine name. The standard will be UMAT in development\nPredefined Field Names String separated by spaces geq0 Define all the fields in the mesh file which should be used as pre-defined values. An increment field is than defined as well. E.g. Predefined Field Names: \"Temperature\" \"Color\"; Temperature and Color must exist in the mesh file. They must be defined as Float or Int in that case. Yes","category":"page"},{"location":"man/models/materials/#Compilation-of-the-UMAT-subroutine","page":"Material Models","title":"Compilation of the UMAT subroutine","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"In order to compile the UMAT subroutine you need to install gfortran. Have a look at this page. After installation you can compile the Fortran subroutine with the following command:","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"gfortran -shared -fPIC -o libusermat.so base.f","category":"page"},{"location":"man/models/materials/#Model-merging","page":"Material Models","title":"Model merging","text":"","category":"section"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"In PeriLab you are able to combine models with each other, by simply adding a +. Therefore, modules can be merged and double coding can be avoided.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"tip: Elastic platic\nIf you want to run elastic platic please use Correspondence Elastic + Correspondence Plastic or PD Solid Elastic + PD Solid Plastic","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"warning: Model order\nThe order is defined by the user. Because the plastic routines need stresses to work, make sure the materials which provide these stresses are before the plastic models.","category":"page"},{"location":"man/models/materials/","page":"Material Models","title":"Material Models","text":"","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"<!– SPDX-FileCopyrightText: 2023 Christian Willberg <christian.willberg@dlr.de>, Jan-Timo Hesse <jan-timo.hesse@dlr.de>","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"SPDX-License-Identifier: BSD-3-Clause –>","category":"page"},{"location":"devLog/#Dev-Steps","page":"-","title":"Dev Steps","text":"","category":"section"},{"location":"devLog/","page":"-","title":"-","text":"Introduction of bond associated correspondence ","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"Developement plan","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"Bond associated neighborhood is the overlap between nlist[iID] and nlist[nlist[iID][jID]]\nFilter equal nodes and create a new neighborhoodlist for bond -> bond_nlist\ncalculate K, Kinv and defGrad -> already there if the neighborhood loop is in a function\nweighted volume (sum(volume(bond_nlist))/sum(volume[nlist[iID]]))","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"If this works for one core the following will be introduced","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"all neighbors search for neighbors at each core\nnumbers are correct and it allows a change in size -> local ID is correct","category":"page"},{"location":"devLog/#Design-decisions","page":"-","title":"Design decisions","text":"","category":"section"},{"location":"devLog/","page":"-","title":"-","text":"Each vector entry for a value exists for all nodes, also if the node does not have this property in a block. However, the synchronisation is very ugly, because all responder nodes of block with value I need the entry at the other core to. If not it will lead nowhere if MPI communication occurs","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"IO\nnodesets are not defined yet in Exodus.jl\n\nsnake_case for variables and functions\nPascalCase for modules and type names\nFULL_UPPERCASE for constants","category":"page"},{"location":"devLog/#Issues","page":"-","title":"Issues","text":"","category":"section"},{"location":"devLog/","page":"-","title":"-","text":"for n=4 -> errors    \nMPI_Neighbor_alltoall -> might be easier","category":"page"},{"location":"devLog/#planned-feature","page":"-","title":"planned feature","text":"","category":"section"},{"location":"devLog/","page":"-","title":"-","text":"test if blocks are defined in yaml, but missing in mesh\nhttps://github.com/StephenVavasis/Unroll.jl\nstatic arrays package -> speed up -> only for arrays smaller 100; inverte of Jacobian, etc.\nintegration of FEM Julia package -> coupling might be better, becaus of more functionality\ntime step minimum for all cores -> parallel computing! -> done\nmatrix -> reshape from vector for better use\nsearch for jl files in material\ncheck the header for the material name\ninclude the file in the code via a makro\nmaterial inclusion is very simple\nbonds as elements in exodus -> filter small to large writing ?! -> elements can be x,y to be represented both\nmultiple materials in one block -> evaluation order","category":"page"},{"location":"devLog/","page":"-","title":"-","text":"","category":"page"},{"location":"man/dev/parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"man/dev/parameters/","page":"Parameters","title":"Parameters","text":"All the parameter are stored in a dictionary called params.","category":"page"},{"location":"man/dev/parameters/","page":"Parameters","title":"Parameters","text":"TODO explain the dictionary","category":"page"},{"location":"man/dev/parameters/","page":"Parameters","title":"Parameters","text":"","category":"page"},{"location":"#PeriLab","page":"Introduction","title":"PeriLab","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the PeriLab documentation!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This resource aims to teach you everything you need to know to get up and running with tabular data manipulation using the PeriLab.jl package.","category":"page"},{"location":"#What-is-PeriLab.jl?","page":"Introduction","title":"What is PeriLab.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"PeriLab.jl provides a Peridynamics [1] simulation core.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Its design and functionality are similar to those of Peridigm  [2] and several extenions [3], [4], [5].","category":"page"},{"location":"#PeriLab.jl-and-the-Peridynamics-Ecosystem","page":"Introduction","title":"PeriLab.jl and the Peridynamics Ecosystem","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Mesh-free particle-based methods are mostly used for the numerical approximation of peridynamics equations. [6] provides an overview of current Peridynamics software developments. In addition to this, many local research groups are also developing their software. Most of the listed tools are problem-specific or developed by a single person. The most sophisticated software tools are EMU and Peridigm. EMU is not open source, but researchers can request the code. However, due to the code developments at the Sandia National labs and the rules of development, the code is officially not usable because the rules violate the \"Treaty on the Non-Proliferation of Nuclear Weapons\".","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Peridigm is an open-source tool that can be used for large-scale problems. It includes multiple material laws, simple damage models. Peridigm is usable under a BSD license. Currently, there is some irregular development ongoing. It provides multiple ways of model input and provides Paraview readable output. The whole code allows the analysis of large-scale problems. A lot of research has been performed utilizing the software.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"sankey-beta\n    Installation,Run time,20\n    Build time, Run time, 10\n    Implementation / Debugging, Run time, 60\n    Calculation, Run time,10\n    Run time, Installation productive, 0\n    Run time, Build time productive, 10\n    Run time, Implementation / Debugging productive, 10\n    Run time, Calculation productive, 80","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"One challenge, however, remains. How can Peridynamics be widely adopted? Classical continuum mechanics is extensively utilized in the engineering field through the finite element method. There is a multitude of commercial and non-commercial software tools available for this purpose. In the case of Peridynamics, this is not the case. Peridigm as the most advanced one provides an open-source code with many functionalities. However, the implementation effort is substantial, and the installation process is difficult and time-consuming. To implement the simplest material law you have to edit at least five files. If you add new files and folders in the project you have to deal with cmake scripts and all challenges related to it.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Moreover, the program is only partially maintained. This results in valuable research findings being underutilized, and Peridynamics, as a result, finds limited application outside of specific niche problems. There is a significant need for software that combines functionality, easy installation, and seamless integration. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"quadrantChart\n    x-axis Low Functionalty --> High Functionalty\n    y-axis Hard to use --> Simple to use\n    Peridigm: [0.85, 0.2]\n    PeriLab: [0.5, 0.8]\n    EMU: [0.95, 0.1]\n    PeriPy: [0.2, 0.7]\n    PeriPyDIC: [0.2, 0.6]\n    LAMMPS: [0.3, 0.3]\n    PeriFlakes: [0.35, 0.4]\n    Relation-Based Software: [0.4, 0.25]\n    BB_PD: [0.2, 0.50]\n    PeriDEM: [0.13, 0.3]","category":"page"},{"location":"#Questions?","page":"Introduction","title":"Questions?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If there is something you expect PeriLab to be capable of, but cannot figure out how to do, please reach out with questions in Domains/Data on Discourse.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Please report bugs by opening an issue.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"You can follow the source links throughout the documentation to jump right to the source files on GitHub to make pull requests for improving the documentation and function capabilities.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Please review PeriLab contributing guidelines before submitting your first PR!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Information on specific versions can be found on the Release page.","category":"page"},{"location":"#Package-Manual","page":"Introduction","title":"Package Manual","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\"man/basics.md\",\n         \"man/getting_started.md\"]\nDepth = 2","category":"page"},{"location":"#API","page":"Introduction","title":"API","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Only exported (i.e. available for use without PeriLab. qualifier after loading the PeriLab.jl package with using PeriLab) types and functions are considered a part of the public API of the PeriLab.jl package. In general all such objects are documented in this manual (in case some documentation is missing please kindly report an issue here).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"man/models/overview/#Models","page":"Overview","title":"Models","text":"","category":"section"},{"location":"man/models/overview/","page":"Overview","title":"Overview","text":"mindmap\n  root((Models))\n    Material Models\n      Bond Based\n        Bond-based Elastic\n      Ordinary\n        PD Solid Elastic\n        PD Solid Plastic\n      Correspondence\n        Correspondence Elastic\n        Correspondence Plastic\n    Damage Models\n      Critical Stretch\n      Critical Energy\n    Thermal Models\n      Thermal Expansion\n      Thermal Flow\n      Heat Transfer\n    Additive Models\n        Simple","category":"page"},{"location":"man/models/overview/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"lib/glossar/#Glossar","page":"Glossar","title":"Glossar","text":"","category":"section"},{"location":"lib/glossar/#Abbreviations","page":"Glossar","title":"Abbreviations","text":"","category":"section"},{"location":"lib/glossar/","page":"Glossar","title":"Glossar","text":"Abbreviation Full\nPD Peridynamics","category":"page"},{"location":"lib/glossar/#Variables","page":"Glossar","title":"Variables","text":"","category":"section"},{"location":"lib/glossar/","page":"Glossar","title":"Glossar","text":"Parameter Name\nmathcalH Neighborhood [-]\nV Volume leftm^3right\nmathbfx Position of point leftmright\nmathbfx Position of neighbor leftmright\nt Time leftsright\nmathbfb Body force densities leftNm^3right\nmathbfu Displacements leftmright\nddotmathbfu Accelerations leftms^2right\nunderlinemathbfT Force density state leftNm^6right\nrho Mass density leftkgm^3right\ntau Temperature leftKright\nDelta Delta of a variable left-right\nmathbfH Heat flux leftWm^2right\nmathbfF Force density leftNm^3right","category":"page"},{"location":"lib/glossar/","page":"Glossar","title":"Glossar","text":"","category":"page"}]
}
